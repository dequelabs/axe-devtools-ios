// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name axeDevToolsUIKit
import CoreGraphics
import Foundation
import Swift
import UIKit
import Vision
import _Concurrency
import zlib
@objc public enum AxeImpact : Swift.Int {
  case MINOR = 0
  case MODERATE = 1
  case SERIOUS = 2
  case CRITICAL = 3
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsUIKit.AxeImpact]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsUIKit.AxeImpact] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AxeRuleId : Swift.Int {
  case A11yElementFocusBox
  case ActiveControlName
  case AssociatedText
  case CollidingControls
  case CollidingViews
  case ColorContrast
  case ConflictingTraits
  case FocusableText
  case ImageViewName
  case InScrollView
  case LabelAtFront
  case LabelInName
  case MeaningfulAccessibleName
  case NestedElementsName
  case ScreenOrientation
  case ScreenTitle
  case TouchTargetSize
  case TouchTargetSpacing
  case InaccessibleAction
  case NestedActiveControls
  case SupportsDynamicType
  public init?(_ str: Swift.String)
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsUIKit.AxeRuleId]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsUIKit.AxeRuleId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AxeStandard : Swift.Int {
  case WCAG_20
  case WCAG_21
  case WCAG_22
  case PLATFORM
  case BEST_PRACTICE
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsUIKit.AxeStandard]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsUIKit.AxeStandard] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AxeStatus : Swift.Int {
  case INAPPLICABLE = 0
  case INCOMPLETE = 1
  case PASS = 2
  case FAIL = 3
  case IGNORED = 4
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsUIKit.AxeStatus]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsUIKit.AxeStatus] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class AxeBounds : axeDevToolsUIKit.AxeRect {
  @objc override final public var description: Swift.String {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AxeRect : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let left: Swift.Float
  @objc final public let right: Swift.Float
  @objc final public let top: Swift.Float
  @objc final public let bottom: Swift.Float
  @objc public var height: Swift.Float {
    @objc get
  }
  @objc public var width: Swift.Float {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class AxeProps : ObjectiveC.NSObject, Swift.Codable {
  public typealias Name = Swift.String
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  final public func get(_ name: axeDevToolsUIKit.AxeProps.Name) -> Swift.Codable?
  final public func getOrError(_ name: axeDevToolsUIKit.AxeProps.Name) throws -> Swift.Codable?
  final public func get<T>(_ name: axeDevToolsUIKit.AxeProps.Name, withType objType: T.Type) -> T? where T : Swift.Decodable, T : Swift.Encodable
  final public func getOrError<T>(_ name: axeDevToolsUIKit.AxeProps.Name, withType objType: T.Type) throws -> T where T : Swift.Decodable, T : Swift.Encodable
  final public func add(_ props: [axeDevToolsUIKit.AxeProps.Name : Swift.Codable?])
  final public func add(_ propName: axeDevToolsUIKit.AxeProps.Name, _ prop: Swift.Codable?)
  @objc deinit
}
extension Swift.String {
  public static let className: Swift.String
  public static let elementType: Swift.String
  public static let axeViewId: Swift.String
  public static let parent: Swift.String
  public static let children: Swift.String
  public static let boundsInScreen: Swift.String
  public static let isAccessibilityFocusable: Swift.String
  public static let accessibilityIdentifier: Swift.String
  public static let name: Swift.String
  public static let role: Swift.String
  public static let state: Swift.String
  public static let value: Swift.String
  public static let isVisibleToUser: Swift.String
  public static let isHeaderOrFooter: Swift.String
  public static let isEnabled: Swift.String
  public static let text: Swift.String
  public static let frame: Swift.String
  public static let isActiveControl: Swift.String
  public static let isAccessibilityElement: Swift.String
  public static let accessibilityPath: Swift.String
  public static let accessibilityTraits: Swift.String
  public static let supportedOrientations: Swift.String
  public static let actions: Swift.String
}
@objc public protocol FABInterface {
  @objc func onCreate(_ fab: axeDevToolsUIKit.FloatingActionButton)
}
@_inheritsConvenienceInitializers @objc final public class AxeConf : ObjectiveC.NSObject, Swift.Codable {
  final public var customRules: Swift.Set<axeDevToolsUIKit.AxeRule> {
    get
    set
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc final public func ignore(rule: Swift.String, _ shouldIgnore: Swift.Bool = true)
  @objc final public func ignore(rules: [Swift.String], _ shouldIgnore: Swift.Bool = true)
  @objc final public func ignore(rulesFor: [Swift.String : Swift.Set<Swift.String>])
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AxeContext : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let axeView: axeDevToolsUIKit.AxeView
  @objc final public let axeDevice: axeDevToolsUIKit.AxeDevice
  @objc final public let screenshot: axeDevToolsUIKit.AxeImage
  @objc final public let axeMetaData: axeDevToolsUIKit.AxeMetaData
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AxeDevice : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc final public let os: Swift.String
  @objc final public let osVersion: Swift.String
  @objc final public let screenHeight: Swift.Float
  @objc final public let screenWidth: Swift.Float
  @objc final public let scale: Swift.Float
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AxeImage : ObjectiveC.NSObject {
  @objc final public let base64png: Swift.String
  @objc final public let frame: axeDevToolsUIKit.AxeBounds
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AxeMetaData : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let appIdentifier: Swift.String
  @objc final public let analysisTimestamp: Swift.Int64
  @objc final public let axeVersion: Swift.String
  @objc final public let screenTitle: Swift.String
  @objc final public let isFullScreenForML: Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AxeResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let axeConf: axeDevToolsUIKit.AxeConf
  @objc final public let axeContext: axeDevToolsUIKit.AxeContext
  @objc final public let axeRuleResults: [axeDevToolsUIKit.AxeRuleResult]
  @objc public var failures: [axeDevToolsUIKit.AxeRuleResult] {
    @objc get
  }
  @objc public var passes: [axeDevToolsUIKit.AxeRuleResult] {
    @objc get
  }
  @objc public var incompletes: [axeDevToolsUIKit.AxeRuleResult] {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var shortDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class AxeRuleResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let status: axeDevToolsUIKit.AxeStatus
  @objc final public let impact: axeDevToolsUIKit.AxeImpact
  @objc final public let ruleId: Swift.String
  @objc final public let ruleSummary: Swift.String
  @objc final public let props: axeDevToolsUIKit.AxeProps
  @objc final public let axeViewId: Swift.String
  @objc final public let isVisibleToUser: Swift.Bool
  @objc final public let experimental: Swift.Bool
  @objc final public let standard: axeDevToolsUIKit.AxeStandard
  @nonobjc public var axeRuleId: axeDevToolsUIKit.AxeRuleId? {
    get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AxeTraits : ObjectiveC.NSObject, Swift.Codable, Swift.OptionSet {
  @objc public var rawValue: Swift.UInt64
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc required override dynamic public init()
  @objc required public init(rawValue raw: Swift.UInt64)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public func formUnion(_ other: axeDevToolsUIKit.AxeTraits)
  @objc public func formIntersection(_ other: axeDevToolsUIKit.AxeTraits)
  @objc public func formSymmetricDifference(_ other: axeDevToolsUIKit.AxeTraits)
  @objc public static let adjustable: axeDevToolsUIKit.AxeTraits
  @objc public static let allowsDirectInteraction: axeDevToolsUIKit.AxeTraits
  @objc public static let button: axeDevToolsUIKit.AxeTraits
  @objc public static let causesPageTurn: axeDevToolsUIKit.AxeTraits
  @objc public static let header: axeDevToolsUIKit.AxeTraits
  @objc public static let image: axeDevToolsUIKit.AxeTraits
  @objc public static let keyboardKey: axeDevToolsUIKit.AxeTraits
  @objc public static let link: axeDevToolsUIKit.AxeTraits
  @objc public static let none: axeDevToolsUIKit.AxeTraits
  @objc public static let notEnabled: axeDevToolsUIKit.AxeTraits
  @objc public static let playsSound: axeDevToolsUIKit.AxeTraits
  @objc public static let searchField: axeDevToolsUIKit.AxeTraits
  @objc public static let selected: axeDevToolsUIKit.AxeTraits
  @objc public static let startsMediaSession: axeDevToolsUIKit.AxeTraits
  @objc public static let staticText: axeDevToolsUIKit.AxeTraits
  @objc public static let summaryElement: axeDevToolsUIKit.AxeTraits
  @objc public static let tabBar: axeDevToolsUIKit.AxeTraits
  @objc public static let updatesFrequently: axeDevToolsUIKit.AxeTraits
  @objc public func toString() -> Swift.String
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public typealias ArrayLiteralElement = axeDevToolsUIKit.AxeTraits
  public typealias Element = axeDevToolsUIKit.AxeTraits
  public typealias RawValue = Swift.UInt64
  @objc deinit
}
@objc public enum AxeRole : Swift.Int {
  case textElement
  case control
  case image
  case genericElement
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsUIKit.AxeRole]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsUIKit.AxeRole] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AxeView : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let className: Swift.String
  @objc final public let elementType: axeDevToolsUIKit.AxeElementType
  @objc final public let boundsInScreen: axeDevToolsUIKit.AxeBounds
  @objc final public let accessibilityIdentifier: Swift.String?
  @objc final public let name: Swift.String?
  @objc final public let role: axeDevToolsUIKit.AxeRole
  @objc final public let state: Swift.String?
  @objc final public let value: Swift.String?
  @objc public var isAccessibilityFocusable: Swift.Bool {
    get
  }
  @objc public var children: [axeDevToolsUIKit.AxeView] {
    get
  }
  @objc weak public var parent: axeDevToolsUIKit.AxeView?
  @objc public var axeViewId: Swift.String {
    @objc get
  }
  @objc final public let view: UIKit.UIView
  @objc public var isVisibleToUser: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @discardableResult
  @objc public func runOnSelfAndDescendants(_ function: (axeDevToolsUIKit.AxeView) -> axeDevToolsUIKit.RunStatus) -> axeDevToolsUIKit.RunStatus
  public func getOrError(prop: axeDevToolsUIKit.AxeProps.Name) throws -> Swift.Codable?
  public func get(prop: axeDevToolsUIKit.AxeProps.Name) -> Swift.Codable?
  public func getOrError<T>(prop name: axeDevToolsUIKit.AxeProps.Name, withType t: T.Type) throws -> T where T : Swift.Decodable, T : Swift.Encodable
  public func get<T>(prop name: axeDevToolsUIKit.AxeProps.Name, withType t: T.Type) -> T? where T : Swift.Decodable, T : Swift.Encodable
  @objc public func isPropTypeOrChild(ofProp propName: axeDevToolsUIKit.AxeProps.Name) -> Swift.Bool
  @objc public func isChild(ofProp propName: axeDevToolsUIKit.AxeProps.Name) -> Swift.Bool
  @objc public func isChild(ofElementType elementType: axeDevToolsUIKit.AxeElementType) -> Swift.Bool
  @objc public func isElementOrChild(ofElementType elementType: axeDevToolsUIKit.AxeElementType) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AxeDevToolsResultKey : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let packageName: Swift.String
  @objc final public let userId: Swift.String
  @objc final public let resultId: Swift.String
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public init?(fabTitle: Swift.String)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class RuleConf : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let experimental: Swift.Bool
  @objc final public let summary: Swift.String
  @objc final public let standard: axeDevToolsUIKit.AxeStandard
  @objc public var impact: axeDevToolsUIKit.AxeImpact {
    get
  }
  public init(impact: axeDevToolsUIKit.AxeImpact, standard: axeDevToolsUIKit.AxeStandard, summary: Swift.String, experimental: Swift.Bool = false)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension Swift.String {
  public static let accessibilityActivationPoint: Swift.String
  public static let accessibilityLabel: Swift.String
  public static let accessibilityValue: Swift.String
  public static let accessibilityViewIsModal: Swift.String
  public static let numberAccessibilityCustomActions: Swift.String
  public static let respondsToContentSizeNotification: Swift.String
  public static let overridesTraitCollectionDidChange: Swift.String
  public static let supportsAutoAdjustment: Swift.String
  public static let adjustsFontForContentSizeCategory: Swift.String
  public static let fontName: Swift.String
  public static let hasConfiguration: Swift.String
  public static let fontSize: Swift.String
  public static let fontIsBold: Swift.String
}
@objc public enum RunStatus : Swift.Int {
  case Continue
  case Stop
  case SkipDescendants
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AxeOrientation : Swift.UInt, Swift.Codable {
  case all = 0
  case portrait = 1
  case landscape = 2
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init?(rawValue: Swift.UInt)
  public typealias AllCases = [axeDevToolsUIKit.AxeOrientation]
  public typealias RawValue = Swift.UInt
  public static var allCases: [axeDevToolsUIKit.AxeOrientation] {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AxePoint : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let x: Swift.Int
  @objc final public let y: Swift.Int
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  convenience required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class UsageServiceBody : ObjectiveC.NSObject {
  @objc deinit
}
@objc public enum AxeElementType : Swift.UInt {
  case any = 0
  case other = 1
  case application = 2
  case window = 4
  case sheet = 5
  case alert = 7
  case button = 9
  case keyboard = 19
  case key = 20
  case navigationBar = 21
  case tabBar = 22
  case tabGroup = 23
  case toolbar = 24
  case statusBar = 25
  case table = 26
  case collectionView = 32
  case slider = 33
  case pageIndicator = 34
  case progressIndicator = 35
  case activityIndicator = 36
  case segmentedControl = 37
  case picker = 38
  case pickerWheel = 39
  case `switch` = 40
  case toggle = 41
  case link = 42
  case image = 43
  case searchField = 45
  case scrollView = 46
  case scrollBar = 47
  case staticText = 48
  case textField = 49
  case secureTextField = 50
  case datePicker = 51
  case textView = 52
  case map = 57
  case webView = 58
  case cell = 75
  case stepper = 79
  case tab = 80
  public func toString() -> Swift.String
  public init?(rawValue: Swift.UInt)
  public typealias AllCases = [axeDevToolsUIKit.AxeElementType]
  public typealias RawValue = Swift.UInt
  public static var allCases: [axeDevToolsUIKit.AxeElementType] {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
}
extension UIKit.UIGestureRecognizer {
  @objc override dynamic open func value(forUndefinedKey key: Swift.String) -> Any?
}
@_hasMissingDesignatedInitializers @objc final public class AxeDevTools : ObjectiveC.NSObject {
  @objc final public var configuration: axeDevToolsUIKit.AxeConf {
    @objc get
    @objc set
  }
  @objc public static var debugStatements: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var fab: axeDevToolsUIKit.FloatingActionButton? {
    @objc get
  }
  @objc public static func login(withUsername username: Swift.String, andPassword password: Swift.String, toServer url: Swift.String = "", organization: Swift.String? = nil) throws -> axeDevToolsUIKit.AxeDevTools
  @objc public static func login(withAPIKey apiKey: Swift.String, toServer url: Swift.String = "", organization: Swift.String? = nil) throws -> axeDevToolsUIKit.AxeDevTools
  @objc public static func login(withAccessToken accessToken: axeDevToolsUIKit.AccessToken, toServer url: Swift.String = "", orgId: Swift.String? = nil) throws -> axeDevToolsUIKit.AxeDevTools
  @objc final public func getResult(_ resultKey: axeDevToolsUIKit.AxeDevToolsResultKey) throws -> axeDevToolsUIKit.AxeResult
  @discardableResult
  @objc final public func postResult(_ result: axeDevToolsUIKit.AxeResult, withTags tags: [Swift.String] = [], withScanName scanName: Swift.String? = nil) throws -> axeDevToolsUIKit.AxeDevToolsResultKey
  @objc final public func tagResult(_ resultKey: axeDevToolsUIKit.AxeDevToolsResultKey, withTags tags: [Swift.String]) throws
  @objc final public func deleteResult(_ resultKey: axeDevToolsUIKit.AxeDevToolsResultKey) throws
  @objc final public func updateScanName(_ resultKey: axeDevToolsUIKit.AxeDevToolsResultKey, to scanName: Swift.String) throws
  @available(*, deprecated, renamed: "saveResult(_:toPath:withFileName:withScanName:)")
  @objc final public func saveResult(_ result: axeDevToolsUIKit.AxeResult, toPath path: Swift.String = "AxeDevToolsResults", withName name: Swift.String = "") throws -> Swift.String
  @objc final public func saveResult(_ result: axeDevToolsUIKit.AxeResult, toPath path: Swift.String = "AxeDevToolsResults", withFileName fileName: Swift.String = "", withScanName scanName: Swift.String? = nil) throws -> Swift.String
  @objc public static func showAxeFAB(forServer url: Swift.String = "") -> axeDevToolsUIKit.AxeDevTools
  @objc final public func hideAxeFAB()
  @objc final public func showA11yFAB(customFAB: axeDevToolsUIKit.FABInterface = A11yFAB(), addTags tags: [Swift.String]? = nil)
  @objc final public func hideA11yFAB()
  @objc final public func run(onView view: UIKit.UIView) throws -> axeDevToolsUIKit.AxeResult
  @objc final public func run(onViewController viewController: UIKit.UIViewController) throws -> axeDevToolsUIKit.AxeResult
  @objc final public func run(onStoryboardName storyboardName: Swift.String, viewControllerId: Swift.String? = nil, bundle: Foundation.Bundle? = nil) throws -> axeDevToolsUIKit.AxeResult
  @objc deinit
}
@_hasMissingDesignatedInitializers open class AxeRule : Swift.Hashable {
  public static func == (lhs: axeDevToolsUIKit.AxeRule, rhs: axeDevToolsUIKit.AxeRule) -> Swift.Bool
  final public let id: Swift.String
  public var summary: Swift.String {
    get
  }
  public var standard: axeDevToolsUIKit.AxeStandard {
    get
  }
  public var impact: axeDevToolsUIKit.AxeImpact {
    get
  }
  public init(ruleConf: axeDevToolsUIKit.RuleConf)
  open func setUp(_ context: axeDevToolsUIKit.AxeContext)
  open func collectProps(for node: axeDevToolsUIKit.AxeView) -> axeDevToolsUIKit.AxeProps
  open func runRule(_ props: axeDevToolsUIKit.AxeProps) throws -> axeDevToolsUIKit.AxeStatus
  open func tearDown()
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class FloatingActionButton : UIKit.UIButton {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class A11yFAB : ObjectiveC.NSObject, axeDevToolsUIKit.FABInterface {
  @objc public func onCreate(_ fab: axeDevToolsUIKit.FloatingActionButton)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIView {
  @objc override dynamic open func value(forUndefinedKey key: Swift.String) -> Any?
}
@_inheritsConvenienceInitializers @objc public class AutomatedTestFAB : ObjectiveC.NSObject, axeDevToolsUIKit.FABInterface {
  @objc public func onCreate(_ fab: axeDevToolsUIKit.FloatingActionButton)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class AccessToken : ObjectiveC.NSObject {
  @objc public init(username: Swift.String, password: Swift.String, realm: Swift.String = "", clientId: Swift.String = "", authServerURL: Swift.String = "") throws
  @objc deinit
}
extension axeDevToolsUIKit.AxeImpact : Swift.CaseIterable {}
extension axeDevToolsUIKit.AxeImpact : Swift.RawRepresentable {}
extension axeDevToolsUIKit.AxeImpact : Swift.Hashable {}
extension axeDevToolsUIKit.AxeImpact : Swift.Equatable {}
extension axeDevToolsUIKit.AxeRuleId : Swift.CaseIterable {}
extension axeDevToolsUIKit.AxeRuleId : Swift.RawRepresentable {}
extension axeDevToolsUIKit.AxeRuleId : Swift.Hashable {}
extension axeDevToolsUIKit.AxeRuleId : Swift.Equatable {}
extension axeDevToolsUIKit.AxeStandard : Swift.CaseIterable {}
extension axeDevToolsUIKit.AxeStandard : Swift.RawRepresentable {}
extension axeDevToolsUIKit.AxeStandard : Swift.Hashable {}
extension axeDevToolsUIKit.AxeStandard : Swift.Equatable {}
extension axeDevToolsUIKit.AxeStatus : Swift.CaseIterable {}
extension axeDevToolsUIKit.AxeStatus : Swift.RawRepresentable {}
extension axeDevToolsUIKit.AxeStatus : Swift.Hashable {}
extension axeDevToolsUIKit.AxeStatus : Swift.Equatable {}
extension axeDevToolsUIKit.AxeRole : Swift.CaseIterable {}
extension axeDevToolsUIKit.AxeRole : Swift.RawRepresentable {}
extension axeDevToolsUIKit.AxeRole : Swift.Hashable {}
extension axeDevToolsUIKit.AxeRole : Swift.Equatable {}
extension axeDevToolsUIKit.RunStatus : Swift.Equatable {}
extension axeDevToolsUIKit.RunStatus : Swift.Hashable {}
extension axeDevToolsUIKit.RunStatus : Swift.RawRepresentable {}
extension axeDevToolsUIKit.AxeOrientation : Swift.CaseIterable {}
extension axeDevToolsUIKit.AxeOrientation : Swift.RawRepresentable {}
extension axeDevToolsUIKit.AxeOrientation : Swift.Hashable {}
extension axeDevToolsUIKit.AxeOrientation : Swift.Equatable {}
extension axeDevToolsUIKit.AxeElementType : Swift.CaseIterable {}
extension axeDevToolsUIKit.AxeElementType : Swift.RawRepresentable {}
extension axeDevToolsUIKit.AxeElementType : Swift.Hashable {}
extension axeDevToolsUIKit.AxeElementType : Swift.Equatable {}
