#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef AXEDEVTOOLSXCUI_SWIFT_H
#define AXEDEVTOOLSXCUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="axeDevToolsXCUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

/// The AccessToken handles logging into the axeDevTools server and keeping the session alive.  Users who have their own instance of the axeDevTools server may need to use this class.  If you are using the default server, you should not need to use this class.
SWIFT_CLASS("_TtC15axeDevToolsXCUI11AccessToken")
@interface AccessToken : NSObject
- (nullable instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password realm:(NSString * _Nonnull)realm clientId:(NSString * _Nonnull)clientId authServerURL:(NSString * _Nonnull)authServerURL error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("This will be removed in our July/August release; please use AxeDevTools.login(withUsername, andPassword, toServer) instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class that contains the location and dimensions of a rectangle, in iOS points.
SWIFT_CLASS("_TtC15axeDevToolsXCUI7AxeRect")
@interface AxeRect : NSObject
/// The left-most bounds of the frame, in pts. Equal to CGRect <code>minX</code> property.
@property (nonatomic, readonly) float left;
/// The right-most bounds of the frame, in pts.
@property (nonatomic, readonly) float right;
/// The top-most bounds of the frame, in pts. Equal to CGRect <code>minY</code> property.
@property (nonatomic, readonly) float top;
/// The bottom-most bounds of the frame, in pts.
@property (nonatomic, readonly) float bottom;
/// The height of the frame, in pts.  Equal to <code>bottom - top</code>.
@property (nonatomic, readonly) float height;
/// The width of the frame, in pts.  Equal to <code>right - left</code>.
@property (nonatomic, readonly) float width;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class that contains the location and dimensions of a rectangle, in on-screen pixels.
SWIFT_CLASS("_TtC15axeDevToolsXCUI9AxeBounds")
@interface AxeBounds : AxeRect
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// The configuration for an axeDevTools object.
/// By default, all <code>AxeRule</code>s will run. You can use this object to ignore rules, or add custom rules that you define.
SWIFT_CLASS("_TtC15axeDevToolsXCUI7AxeConf")
@interface AxeConf : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates a new <code>AxeConf</code> object.  All rules are added by default.  See <code>AxeRuleId</code> for a full list of available rules.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This method allows you to ignore (or re-introduce) results from any rule, including custom rules.  By default, no rules (including custom rules) are ignored.
/// \param rule the rule’s <code>AxeRuleId</code> (or a custom rule’s class name) whose results should be ignored (or included), as a String.
///
/// \param shouldIgnore a <code>Bool</code> indicating whether the rule’s results should be ignored. Set to <code>true</code> if the rule’s results should be ignored, or <code>false</code> if the rule’s results should be included.  Default value is <code>true</code>.
///
- (void)ignoreWithRule:(NSString * _Nonnull)rule :(BOOL)shouldIgnore;
/// This method allows you to ignore (or re-introduce) results from any rule, including custom rules.  By default, no rules (including custom rules) are ignored.
/// \param rules the <code>AxeRuleId</code>s (or classNames, for custom rules) of the rules you wish to ignore, as a <code>String</code>.
///
/// \param shouldIgnore a <code>Bool</code> indicating whether the set of rules should have their results ignored. Set to <code>true</code> if they should be ignored or <code>false</code> if they should be included.  Default value is <code>true</code>.
///
- (void)ignoreWithRules:(NSArray<NSString *> * _Nonnull)rules :(BOOL)shouldIgnore;
/// Ignore specific rules for specific views, as defined in the provided dictionary, by Class or Accessibility Identifier.
/// Classes that inherit from a classname specified here will not be ignored.  For example, if you specify that the rule <code>InScrollView</code> should not run on any <code>UILabel</code>, <code>InScrollView</code> will still run on the class <code>DQLabel</code> (which inherits from <code>UILabel</code>).
/// *
/// \param rulesFor A dictionary where each key, the Class name or Accessibility Identifier of a view, has a <code>Set</code> of <code>Strings</code> containing Rule Id’s to ignore.
///
- (void)ignoreWithRulesFor:(NSDictionary<NSString *, NSSet<NSString *> *> * _Nonnull)rulesFor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class AxeView;
@class AxeDevice;
@class AxeImage;
@class AxeMetaData;

/// Lives within AxeResult and contains meta data about the scan, device information, the screenshot, and the view hierarchy.
SWIFT_CLASS("_TtC15axeDevToolsXCUI10AxeContext")
@interface AxeContext : NSObject
/// The view hierarchy of the scanned view.
@property (nonatomic, readonly, strong) AxeView * _Nonnull axeView;
/// Information about the device used for the scan.
@property (nonatomic, readonly, strong) AxeDevice * _Nonnull axeDevice;
/// A screenshot of the view that was scanned.
@property (nonatomic, readonly, strong) AxeImage * _Nonnull screenshot;
/// Additional meta data.
@property (nonatomic, strong) AxeMetaData * _Nonnull axeMetaData;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class AxeDevToolsResultKey;
@class AxeResult;

SWIFT_CLASS("_TtC15axeDevToolsXCUI11AxeDevTools")
@interface AxeDevTools : NSObject
/// Set this property if you want to change which rules are run or if you want to add custom rules.
@property (nonatomic, strong) AxeConf * _Nonnull configuration;
/// Set this property to <code>true</code> if you want additional debug information for unexpected behavior.
/// We may request this to be turned on if an obscure bug is found.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL debugStatements;)
+ (BOOL)debugStatements SWIFT_WARN_UNUSED_RESULT;
+ (void)setDebugStatements:(BOOL)value;
/// This function logs you into the cloud instance of axeDevTools. You must have a valid session before utilizing the framework’s features. This function can be called in App or Scene Delegate to set up manual tests (to show the Floating Action Button) and also can be used to set up automated tests.
/// <ul>
///   <li>
///     For Objective-C, pass in an empty String to the <code>url</code> parameter and the default server will be used.
///   </li>
///   <li>
///     Will throw an error if there were incorrect credentials.
///   </li>
///   <li>
///     Google authentication information does not work in this method.
///   </li>
/// </ul>
/// \param username Username for axeDevTools. Usually an email address.
///
/// \param password Password for axeDevTools.
///
/// \param url URL of the server receiving the scans if it’s not Deque’s service. This should only be filled out for enterprises with their own instance.
///
///
/// returns:
/// An instantiated AxeDevTools object.  You will not be able to scan anything without this object.
+ (AxeDevTools * _Nullable)loginWithUsername:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password toServer:(NSString * _Nonnull)url organization:(NSString * _Nullable)organization error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// This function logs you into the cloud instance of axeDevTools. You must have a valid session before utilizing the framework’s features. This function can be called in App or Scene Delegate to set up manual tests (to show the Floating Action Button) and also can be used to set up automated tests.
/// <ul>
///   <li>
///     For Objective-C, pass in an empty String to the <code>url</code> parameter and the default server will be used.
///   </li>
///   <li>
///     Will throw an error if there were incorrect credentials.
///   </li>
///   <li>
///     Google authentication information does not work in this method.
///   </li>
/// </ul>
/// \param apiKey API Key for axeDevTools.
///
/// \param url URL of the server receiving the scans if it’s not Deque’s service. This should only be filled out for enterprises with their own instance.
///
///
/// returns:
/// An instantiated AxeDevTools object.  You will not be able to scan anything without this object.
+ (AxeDevTools * _Nullable)loginWithAPIKey:(NSString * _Nonnull)apiKey toServer:(NSString * _Nonnull)url organization:(NSString * _Nullable)organization error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// This function logs you into the cloud instance of axeDevTools. You must have a valid session before utilizing the framework’s features. This function can be called in App or Scene Delegate to set up manual tests (to show the Floating Action Button) and also can be used to set up automated tests.  Use this version of login if you have a special instance of the server to log into.
/// <ul>
///   <li>
///     Google authentication information does not work in this method.
///   </li>
///   <li>
///     Will throw an error if there were incorrect credentials.
///   </li>
/// </ul>
/// \param accessToken If you require this method, a Deque representative will give you the information needed to create a valid AccessToken.
///
/// \param url URL of the server receiving the scans.  A Deque representative will give you the information needed to fill out this parameter.
///
///
/// returns:
/// initialized AxeDevTools object. Will throw an error if there was an issue logging in.
+ (AxeDevTools * _Nullable)loginWithAccessToken:(AccessToken * _Nonnull)accessToken toServer:(NSString * _Nonnull)url orgId:(NSString * _Nullable)orgId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This will be removed in our July/August release; please use login(withUsername, andPassword, toServer) instead");
/// Retrieves the scan from the server.  This can be used within UITests to assert things about a scan that was pushed to the server, such as the number of accessibility issues within a scan.  Will throw an error if there was an issue retrieving the scan.
/// \param resultKey The AxeDevToolsResultKey of the scan you would like to retrieve from the server.
///
///
/// returns:
/// The scan from the server.
- (AxeResult * _Nullable)getResult:(AxeDevToolsResultKey * _Nonnull)resultKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Use this after calling <code>run</code> to send the scan to the server.  Will throw an error if sending the scan was not successful.
/// \param result The result that should be pushed to the dashboard.
///
/// \param tags A list of tags that should be associated with the scan, as an array of String.
///
/// \param scanName A String to change the scan name to in the dashboard.
///
///
/// returns:
/// AxeDevToolsResultKey, which can be used to retrieve the scan from the server.
- (AxeDevToolsResultKey * _Nullable)postResult:(AxeResult * _Nonnull)result withTags:(NSArray<NSString *> * _Nonnull)tags withScanName:(NSString * _Nullable)scanName error:(NSError * _Nullable * _Nullable)error;
/// Tags the scan in the dashboard with the strings provided.  Will throw an error if there was an issue tagging the scan.
/// \param resultKey The AxeDevToolsResultKey of the scan you would like to tag.
///
/// \param tags The tags you would like to give the scan, as <code>[String]</code>.
///
- (BOOL)tagResult:(AxeDevToolsResultKey * _Nonnull)resultKey withTags:(NSArray<NSString *> * _Nonnull)tags error:(NSError * _Nullable * _Nullable)error;
/// Deletes the scan from the server.  The scan will no longer be available on the dashboard. Will throw an error if there was an issue deleting the scan.
/// \param resultKey the AxeDevToolsResultKey of the scan that should be deleted from the server.
///
- (BOOL)deleteResult:(AxeDevToolsResultKey * _Nonnull)resultKey error:(NSError * _Nullable * _Nullable)error;
/// Sets or updates the scan name that is displayed in the dashboard. Will throw an error if there was an issue (re)naming the scan.
/// \param resultKey The AxeDevToolsResultKey of the scan you would like to update.
///
/// \param scanName The name you would like to give the scan.
///
- (BOOL)updateScanName:(AxeDevToolsResultKey * _Nonnull)resultKey to:(NSString * _Nonnull)scanName error:(NSError * _Nullable * _Nullable)error;
/// Use this after calling <code>run</code> in your unit test to save the scan to your machine, as JSON.
/// note:
/// This function does not allow you to change the extension of the file; at this point in time it can only be saved as JSON.
/// This function will not overwrite a file if the file already exists.  Instead, it will attach a number to the end of the file name (for example, “<appIdentifier>-<screenTitle>-1.json”).
/// \param result The result that should be saved to your machine.
///
/// \param path Where you want the scan to be saved to, as a String.  The path will automatically be appended to your home directory.  If not specified, the scan will save into a folder called “AxeDevToolsResults” in your home directory (/Users/yourname/).
///
/// \param fileName What you want the file to be called, as a String. If not specified, the file’s name will be  “<appIdentifier>-<screenTitle>” or if scanName if specified, “<appIdentifier>-<scanName>”.
///
/// \param scanName What you want the scan to be called. If not specified, the scanName will be “<screenTitle>”
///
///
/// returns:
/// String, the path to the saved file.
- (NSString * _Nullable)saveResult:(AxeResult * _Nonnull)result toPath:(NSString * _Nonnull)path withFileName:(NSString * _Nonnull)fileName withScanName:(NSString * _Nullable)scanName error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Use this in a UITest to analyze the accessibility of an application.  Useful in testing views built in SwiftUI, Native iOS or React Native.
/// \param onBundleIdentifier The bundle identifier of the application to test. Application must be loaded at the time of the test.
///
///
/// returns:
/// the scan, as an AxeResult.
- (AxeResult * _Nullable)runOnBundleIdentifier:(NSString * _Nonnull)bundleId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Use this in a UITest to analyze the accessibility of a screen or a view. Useful in testing views built in SwiftUI, Native iOS or React Native.
/// \param onElement The root element of the screen you wanted tested, or one component.  Must be an XCUIElement.
///
///
/// returns:
/// the scan, as an AxeResult.
- (AxeResult * _Nullable)runOnElement:(id _Nonnull)element error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A scan’s unique identifier on the axeDevTools Mobile server. You can use the AxeDevToolsResultKey to retrieve, tag, and
/// delete scans on the server.
SWIFT_CLASS("_TtC15axeDevToolsXCUI20AxeDevToolsResultKey")
@interface AxeDevToolsResultKey : NSObject
/// The name of the application that the scan came from. Should be the Bundle Identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull packageName;
/// A unique String associated with the user who pushed up the scan.  This is not the same as the username.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// A unique String associated with the specific scan.
@property (nonatomic, readonly, copy) NSString * _Nonnull resultId;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Use this in UI Testing to convert the Floating Action Button title into a valid AxeDevToolsResultKey.  This can then be used to retrieve the scan from the server, tag it, change its name, and delete it.
/// This initializer will return <code>nil</code> if the given String is not in the expected format.  If supplying the FAB’s title directly and this method is returning <code>nil</code>, it may mean that there was an error sending the scan to the server.
/// \param fabTitle The FloatingActionButton’s <code>title</code> or <code>label</code> property after it is tapped.
///
- (nullable instancetype)initWithFabTitle:(NSString * _Nonnull)fabTitle OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Information about the device used when the scan was created.
SWIFT_CLASS("_TtC15axeDevToolsXCUI9AxeDevice")
@interface AxeDevice : NSObject
/// The name of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The operating system that the device was running. Will likely be “iOS”.
@property (nonatomic, readonly, copy) NSString * _Nonnull os;
/// The iOS version that the device was running at the time of the scan.
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// The device’s screen height, in pixels
@property (nonatomic, readonly) float screenHeight;
/// The device’s screen width, in pixels
@property (nonatomic, readonly) float screenWidth;
/// The number of pixels in one iOS point (pt)
@property (nonatomic, readonly) float scale;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// the type of object.  Derived from XCUIElement <code>ElementType</code>.
typedef SWIFT_ENUM(NSUInteger, AxeElementType, open) {
  AxeElementTypeAny = 0,
/// any view not otherwise described by the other options available in this enum.
  AxeElementTypeOther = 1,
  AxeElementTypeApplication = 2,
  AxeElementTypeWindow = 4,
  AxeElementTypeSheet = 5,
  AxeElementTypeAlert = 7,
  AxeElementTypeButton = 9,
  AxeElementTypeKeyboard = 19,
  AxeElementTypeKey = 20,
  AxeElementTypeNavigationBar = 21,
  AxeElementTypeTabBar = 22,
  AxeElementTypeTabGroup = 23,
  AxeElementTypeToolbar = 24,
  AxeElementTypeStatusBar = 25,
  AxeElementTypeTable = 26,
  AxeElementTypeCollectionView = 32,
  AxeElementTypeSlider = 33,
  AxeElementTypePageIndicator = 34,
  AxeElementTypeProgressIndicator = 35,
  AxeElementTypeActivityIndicator = 36,
  AxeElementTypeSegmentedControl = 37,
  AxeElementTypePicker = 38,
  AxeElementTypePickerWheel = 39,
  AxeElementTypeSwitch = 40,
  AxeElementTypeToggle = 41,
  AxeElementTypeLink = 42,
  AxeElementTypeImage = 43,
  AxeElementTypeSearchField = 45,
  AxeElementTypeScrollView = 46,
  AxeElementTypeScrollBar = 47,
  AxeElementTypeStaticText = 48,
  AxeElementTypeTextField = 49,
  AxeElementTypeSecureTextField = 50,
  AxeElementTypeDatePicker = 51,
  AxeElementTypeTextView = 52,
  AxeElementTypeMap = 57,
  AxeElementTypeWebView = 58,
  AxeElementTypeCell = 75,
  AxeElementTypeStepper = 79,
  AxeElementTypeTab = 80,
};


/// A screenshot of a view, or the entire device’s screen.
SWIFT_CLASS("_TtC15axeDevToolsXCUI8AxeImage")
@interface AxeImage : NSObject
/// The screenshot, converted to base64
@property (nonatomic, readonly, copy) NSString * _Nonnull base64png;
/// The size of the image, in pixels
@property (nonatomic, readonly, strong) AxeBounds * _Nonnull frame;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// How serious a failure of a rule is.
typedef SWIFT_ENUM(NSInteger, AxeImpact, open) {
/// the application is usable but has some annoyances. This is the least severe impact.
  AxeImpactMINOR = 0,
/// the application is usable but may be slightly more difficult to use for some users.
  AxeImpactMODERATE = 1,
/// the application is difficult to use for some users.
  AxeImpactSERIOUS = 2,
/// the application may not be usable or may be very difficult to use for some users.
  AxeImpactCRITICAL = 3,
};


/// The meta data of a scan.
SWIFT_CLASS("_TtC15axeDevToolsXCUI11AxeMetaData")
@interface AxeMetaData : NSObject
/// The application that was scanned
@property (nonatomic, readonly, copy) NSString * _Nonnull appIdentifier;
/// The time that the scan occurred
@property (nonatomic, readonly) int64_t analysisTimestamp;
/// The version of axeDevTools iOS used
@property (nonatomic, readonly, copy) NSString * _Nonnull axeVersion;
/// The title of the screen that was scanned, if available
@property (nonatomic, copy) NSString * _Nonnull screenTitle;
@property (nonatomic, readonly) BOOL isFullScreenForML;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSUInteger, AxeOrientation, open) {
  AxeOrientationAll = 0,
  AxeOrientationPortrait = 1,
  AxeOrientationLandscape = 2,
};


/// A location on the screen, either in pixels or iOS points (pt). Usually converted from a CGPoint
SWIFT_CLASS("_TtC15axeDevToolsXCUI8AxePoint")
@interface AxePoint : NSObject
/// The horizontal location of the point.
@property (nonatomic, readonly) NSInteger x;
/// The vertical location of the point.
@property (nonatomic, readonly) NSInteger y;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// AxeProps are all properties used to help identify views in an application and to figure out whether a view is accessible
SWIFT_CLASS("_TtC15axeDevToolsXCUI8AxeProps")
@interface AxeProps : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an empty AxeProps object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@class AxeRuleResult;

/// This class contains all the information from one accessibility scan of a screen.  This is a Swift representation of the JSON sent to the axe DevTools Mobile server (if using UI automated tests or manual tests). This can be used to assert number of accessibility failures and passes on one screen.  It also contains the view hierarchy of what was scanned and which rules were run.
SWIFT_CLASS("_TtC15axeDevToolsXCUI9AxeResult")
@interface AxeResult : NSObject
@property (nonatomic, copy) NSString * _Nullable scanName;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tags;
/// The configuration of the scan
@property (nonatomic, readonly, strong) AxeConf * _Nonnull axeConf;
/// Information about the screen that was scanned
@property (nonatomic, readonly, strong) AxeContext * _Nonnull axeContext;
/// A list of failing, passing, ignored, and incomplete results
@property (nonatomic, readonly, copy) NSArray<AxeRuleResult *> * _Nonnull axeRuleResults;
/// All failures in the scan
@property (nonatomic, readonly, copy) NSArray<AxeRuleResult *> * _Nonnull failures;
/// All passes in the scan
@property (nonatomic, readonly, copy) NSArray<AxeRuleResult *> * _Nonnull passes;
/// All incompletes in the scan
@property (nonatomic, readonly, copy) NSArray<AxeRuleResult *> * _Nonnull incompletes;
/// A complete description of the result.  Contains summaries for each rule and prints out information about
/// any failing views.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Summary of the scan. Contains the number of failures, passes, and incompletes.
@property (nonatomic, readonly, copy) NSString * _Nonnull shortDescription;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The view’s primary purpose.
typedef SWIFT_ENUM(NSInteger, AxeRole, open) {
/// The view’s primary purpose is to display text. Views that can be interacted with by a user, even if they also display text, are counted as controls.
  AxeRoleTextElement = 0,
/// The view’s primary purpose is to be interacted with by the user.  Views that have text within them that are also actionable (such as buttons, textFields, etc) are counted as controls.
  AxeRoleControl = 1,
/// The view’s primary purpose is to display an image.
  AxeRoleImage = 2,
/// The view’s primary purpose is otherwise not mentioned (layout views, background views, etc).
  AxeRoleGenericElement = 3,
};

/// A unique name for each of the rules run by default.
typedef SWIFT_ENUM(NSInteger, AxeRuleId, open) {
  AxeRuleIdA11yElementFocusBox = 0,
  AxeRuleIdActiveControlName = 1,
  AxeRuleIdAssociatedText = 2,
  AxeRuleIdCollidingControls = 3,
  AxeRuleIdCollidingViews = 4,
  AxeRuleIdColorContrast = 5,
  AxeRuleIdConflictingTraits = 6,
  AxeRuleIdFocusableText = 7,
  AxeRuleIdImageViewName = 8,
  AxeRuleIdInScrollView = 9,
  AxeRuleIdInaccessibleAction = 10,
  AxeRuleIdLabelAtFront = 11,
  AxeRuleIdLabelInName = 12,
  AxeRuleIdMeaningfulAccessibleName = 13,
  AxeRuleIdNestedElementsName = 14,
  AxeRuleIdScreenOrientation = 15,
  AxeRuleIdScreenTitle = 16,
  AxeRuleIdSupportsDynamicType = 17,
  AxeRuleIdTouchTargetSize = 18,
  AxeRuleIdTouchTargetSpacing = 19,
};

enum AxeStatus : NSInteger;
enum AxeStandard : NSInteger;

/// A summary of one rule being run on one view.
SWIFT_CLASS("_TtC15axeDevToolsXCUI13AxeRuleResult")
@interface AxeRuleResult : NSObject
/// whether the view passed, failed, or returned incomplete on the rule
@property (nonatomic, readonly) enum AxeStatus status;
/// refers to the end-user impact behind issues found in your scans.
/// Read more about impact in the References section of
/// axe DevTools Mobile docs at docs.deque.com.
@property (nonatomic, readonly) enum AxeImpact impact;
/// the name of the rule that was run on the view
@property (nonatomic, readonly, copy) NSString * _Nonnull ruleId;
/// a brief description of the rule that was run on the view
@property (nonatomic, readonly, copy) NSString * _Nonnull ruleSummary;
/// the properties used to determine whether the view passes or fails a rule
@property (nonatomic, readonly, strong) AxeProps * _Nonnull props;
/// the view’s identifier, calculated from its hash
/// This is identical to the AxeViewId present in AxeView
@property (nonatomic, readonly, copy) NSString * _Nonnull axeViewId;
/// whether the view is in the current screenshot.  Will be false if the view is off-screen or behind a modal.
@property (nonatomic, readonly) BOOL isVisibleToUser;
/// Whether a rule is currently experimental or not.
@property (nonatomic, readonly) BOOL experimental;
/// The standard that the rule falls under (WCAG, Best practice, etc). See <code>AxeStandard</code> for more information.
@property (nonatomic, readonly) enum AxeStandard standard;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A list of standards that the rule may fall under.
typedef SWIFT_ENUM(NSInteger, AxeStandard, open) {
/// The rule detects a failure of a WCAG 2.0 Success Criteria
  AxeStandardWCAG_20 = 0,
/// The rule detects a failure of a WCAG 2.1 Success Criteria
  AxeStandardWCAG_21 = 1,
/// The rule detects a failure of a WCAG 2.2 Success Criteria
  AxeStandardWCAG_22 = 2,
/// The rule is a recommendation from Apple Design Guidelines
  AxeStandardPLATFORM = 3,
/// The rule is a recommendation from Deque on how to best make your app accessible.  The rule may also follow a WCAG Best Practice.
  AxeStandardBEST_PRACTICE = 4,
};

/// A set of options for when a rule is run on a view.
typedef SWIFT_ENUM(NSInteger, AxeStatus, open) {
/// The view was not applicable to the rule.
  AxeStatusINAPPLICABLE = 0,
/// The view ran into an error and needs to be reviewed for accessibility manually.
  AxeStatusINCOMPLETE = 1,
/// The view does not have an accessibility issue.
  AxeStatusPASS = 2,
/// The view has an accessibility issue.
  AxeStatusFAIL = 3,
/// The view was not checked for accessibility issues.
  AxeStatusIGNORED = 4,
};


SWIFT_CLASS("_TtC15axeDevToolsXCUI9AxeTraits")
@interface AxeTraits : NSObject
@property (nonatomic) uint64_t rawValue;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRawValue:(uint64_t)raw OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(AxeTraits * _Nonnull)other;
- (void)formIntersection:(AxeTraits * _Nonnull)other;
- (void)formSymmetricDifference:(AxeTraits * _Nonnull)other;
/// Same as UIAccessibilityTraits.adjustable
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull adjustable;)
+ (AxeTraits * _Nonnull)adjustable SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.allowsDirectInteraction
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull allowsDirectInteraction;)
+ (AxeTraits * _Nonnull)allowsDirectInteraction SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.button
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull button;)
+ (AxeTraits * _Nonnull)button SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.causesPageTurn
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull causesPageTurn;)
+ (AxeTraits * _Nonnull)causesPageTurn SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.header
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull header;)
+ (AxeTraits * _Nonnull)header SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.image
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull image;)
+ (AxeTraits * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.keyboardKey
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull keyboardKey;)
+ (AxeTraits * _Nonnull)keyboardKey SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.link
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull link;)
+ (AxeTraits * _Nonnull)link SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.none
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull none;)
+ (AxeTraits * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.notEnabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull notEnabled;)
+ (AxeTraits * _Nonnull)notEnabled SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.playsSound
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull playsSound;)
+ (AxeTraits * _Nonnull)playsSound SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.searchField
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull searchField;)
+ (AxeTraits * _Nonnull)searchField SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.selected
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull selected;)
+ (AxeTraits * _Nonnull)selected SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.startsMediaSession
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull startsMediaSession;)
+ (AxeTraits * _Nonnull)startsMediaSession SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.staticText
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull staticText;)
+ (AxeTraits * _Nonnull)staticText SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.summaryElement
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull summaryElement;)
+ (AxeTraits * _Nonnull)summaryElement SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.tabBar
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull tabBar;)
+ (AxeTraits * _Nonnull)tabBar SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.updatesFrequently
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull updatesFrequently;)
+ (AxeTraits * _Nonnull)updatesFrequently SWIFT_WARN_UNUSED_RESULT;
/// Converts an AxeTrait into an easily readable String.
///
/// returns:
/// The name of the AxeTrait. If there are multiple traits within an AxeTraits object, the traits will be in a comma-separated String.  For example, <code>(.button | .adjustable).toString()</code> would return <code>Adjustable, Button</code>.
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
@end

enum RunStatus : NSInteger;

/// A class representing one view in a view hierarchy.
SWIFT_CLASS("_TtC15axeDevToolsXCUI7AxeView")
@interface AxeView : NSObject
/// name of the original class, as a String (UIButton, UIWindow, DQButton, etc).
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
/// the type of object.  We use this to help determine whether a rule should be run on a specific view.  AxeElementTypes are derived from XCUIElement <code>ElementType</code>.
@property (nonatomic, readonly) enum AxeElementType elementType;
/// the view’s on-screen coordinates, in pixels (not pt).
@property (nonatomic, readonly, strong) AxeBounds * _Nonnull boundsInScreen;
/// the view’s accessibility identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityIdentifier;
/// the view’s accessible name.  This is usually equivalent to the view’s accessibilityLabel or its visible text.  Will be <code>nil</code> if the view is not focusable by VoiceOver.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// the type of the view.  See <code>AxeRole</code> for more information.
@property (nonatomic, readonly) enum AxeRole role;
/// the view’s state, if it has one.  Will be <code>nil</code> if the view is not a control.
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// the view’s value, if it has one.  Will be <code>nil</code> if the view does not have a changeable value.  Switches, sliders, steppers, etc, all have values.
@property (nonatomic, readonly, copy) NSString * _Nullable value;
/// whether a view can be directly focused by VoiceOver. This property is calculated from isAccessibilityElement, and will be false for any child views within a VoiceOver-focusable view.
@property (nonatomic, readonly) BOOL isAccessibilityFocusable;
/// The view’s subviews, as AxeViews
@property (nonatomic, readonly, copy) NSArray<AxeView *> * _Nonnull children;
/// The view’s parent, as an AxeView.
@property (nonatomic, weak) AxeView * _Nullable parent;
/// a unique identifier for the view.  The axeViewId will change between scans of the same view.
@property (nonatomic, readonly, copy) NSString * _Nonnull axeViewId;
/// whether a view can be seen on-screen at the time of the scan.  Will return false if the view is off-screen or behind a modal or other views (such as a tab bar or a navigation bar).
@property (nonatomic, readonly) BOOL isVisibleToUser;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Runs through the view hierarchy in a depth-first search, with the view that this method was called on as the “root” view.
/// \param function The function that should be run on the view hierarchy.
///
///
/// returns:
/// Whether to continue running through the view hierarchy.  See <code>RunStatus</code> for more information.
- (enum RunStatus)runOnSelfAndDescendants:(SWIFT_NOESCAPE enum RunStatus (^ _Nonnull)(AxeView * _Nonnull))function;
/// Finds whether the view’s provided property is true or has an ancestor whose provided property is true.
/// important:
/// <code>propName</code> must be the name of a property that is a <code>Bool</code>. If it is not, this method will log an error into the console and automatically return false.
/// \param propName a property that is a <code>Bool</code> that the view or an ancestor of the view may have set to true.
///
///
/// returns:
/// true if the view’s property is true or is a child of a view whose provided property is true; false otherwise.
- (BOOL)isPropTypeOrChildOfProp:(NSString * _Nonnull)propName SWIFT_WARN_UNUSED_RESULT;
/// Finds whether the view has an ancestor whose provided property is true.
/// important:
/// <code>propName</code> must be the name of a property that is a <code>Bool</code>. If it is not, this method will log an error into the console and automatically return false.
/// \param propName a property that is a <code>Bool</code> that an ancestor of the view may have set to true.
///
///
/// returns:
/// true if the view is a child of a view whose provided property is true; false otherwise.
- (BOOL)isChildOfProp:(NSString * _Nonnull)propName SWIFT_WARN_UNUSED_RESULT;
/// Checks whether an ancestor of this view is of the elementType provided.
/// \param elementType the type that the ancestor may be.
///
///
/// returns:
/// true if the view is a child of the elementType provided, otherwise false.
- (BOOL)isChildOfElementType:(enum AxeElementType)elementType SWIFT_WARN_UNUSED_RESULT;
/// Finds whether the view is of the elementType provided, or if the view has an ancestor that is of the elementType provided.
/// \param elementType the type that the view or an ancestor of the view may be.
///
///
/// returns:
/// true if the view is the elementType provided or if it is a child of the elementType provided; false otherwise.
- (BOOL)isElementOrChildOfElementType:(enum AxeElementType)elementType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// An object that holds information about the rule, including a brief description, the severity of a failure of the rule, and whether the rule is classified as a WCAG Success Criteria.
SWIFT_CLASS("_TtC15axeDevToolsXCUI8RuleConf")
@interface RuleConf : NSObject
/// Whether a rule is currently experimental or not.
@property (nonatomic, readonly) BOOL experimental;
/// A brief description of the rule.
@property (nonatomic, readonly, copy) NSString * _Nonnull summary;
/// The standard that the rule falls under (WCAG, Best practice, etc). See <code>AxeStandard</code> for more information.
@property (nonatomic, readonly) enum AxeStandard standard;
/// The severity of a failure of the rule. See <code>AxeImpact</code> for more information.
@property (nonatomic, readonly) enum AxeImpact impact;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Whether the view hierarchy should continue to be traversed.
typedef SWIFT_ENUM(NSInteger, RunStatus, open) {
/// The view hierarchy should continue to be traversed.
  RunStatusContinue = 0,
/// The view hierarchy should no longer be traversed and will immediately stop at this point.
  RunStatusStop = 1,
/// The view hierarchy should continue to be traversed along siblings of this view and their descendants, but should not traverse through child elements of this view.
  RunStatusSkipDescendants = 2,
};





SWIFT_CLASS("_TtC15axeDevToolsXCUI16UsageServiceBody")
@interface UsageServiceBody : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef AXEDEVTOOLSXCUI_SWIFT_H
#define AXEDEVTOOLSXCUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="axeDevToolsXCUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

/// The AccessToken handles logging into the axeDevTools server and keeping the session alive.  Users who have their own instance of the axeDevTools server may need to use this class.  If you are using the default server, you should not need to use this class.
SWIFT_CLASS("_TtC15axeDevToolsXCUI11AccessToken")
@interface AccessToken : NSObject
- (nullable instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password realm:(NSString * _Nonnull)realm clientId:(NSString * _Nonnull)clientId authServerURL:(NSString * _Nonnull)authServerURL error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("This will be removed in our July/August release; please use AxeDevTools.login(withUsername, andPassword, toServer) instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class that contains the location and dimensions of a rectangle, in iOS points.
SWIFT_CLASS("_TtC15axeDevToolsXCUI7AxeRect")
@interface AxeRect : NSObject
/// The left-most bounds of the frame, in pts. Equal to CGRect <code>minX</code> property.
@property (nonatomic, readonly) float left;
/// The right-most bounds of the frame, in pts.
@property (nonatomic, readonly) float right;
/// The top-most bounds of the frame, in pts. Equal to CGRect <code>minY</code> property.
@property (nonatomic, readonly) float top;
/// The bottom-most bounds of the frame, in pts.
@property (nonatomic, readonly) float bottom;
/// The height of the frame, in pts.  Equal to <code>bottom - top</code>.
@property (nonatomic, readonly) float height;
/// The width of the frame, in pts.  Equal to <code>right - left</code>.
@property (nonatomic, readonly) float width;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class that contains the location and dimensions of a rectangle, in on-screen pixels.
SWIFT_CLASS("_TtC15axeDevToolsXCUI9AxeBounds")
@interface AxeBounds : AxeRect
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// The configuration for an axeDevTools object.
/// By default, all <code>AxeRule</code>s will run. You can use this object to ignore rules, or add custom rules that you define.
SWIFT_CLASS("_TtC15axeDevToolsXCUI7AxeConf")
@interface AxeConf : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates a new <code>AxeConf</code> object.  All rules are added by default.  See <code>AxeRuleId</code> for a full list of available rules.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This method allows you to ignore (or re-introduce) results from any rule, including custom rules.  By default, no rules (including custom rules) are ignored.
/// \param rule the rule’s <code>AxeRuleId</code> (or a custom rule’s class name) whose results should be ignored (or included), as a String.
///
/// \param shouldIgnore a <code>Bool</code> indicating whether the rule’s results should be ignored. Set to <code>true</code> if the rule’s results should be ignored, or <code>false</code> if the rule’s results should be included.  Default value is <code>true</code>.
///
- (void)ignoreWithRule:(NSString * _Nonnull)rule :(BOOL)shouldIgnore;
/// This method allows you to ignore (or re-introduce) results from any rule, including custom rules.  By default, no rules (including custom rules) are ignored.
/// \param rules the <code>AxeRuleId</code>s (or classNames, for custom rules) of the rules you wish to ignore, as a <code>String</code>.
///
/// \param shouldIgnore a <code>Bool</code> indicating whether the set of rules should have their results ignored. Set to <code>true</code> if they should be ignored or <code>false</code> if they should be included.  Default value is <code>true</code>.
///
- (void)ignoreWithRules:(NSArray<NSString *> * _Nonnull)rules :(BOOL)shouldIgnore;
/// Ignore specific rules for specific views, as defined in the provided dictionary, by Class or Accessibility Identifier.
/// Classes that inherit from a classname specified here will not be ignored.  For example, if you specify that the rule <code>InScrollView</code> should not run on any <code>UILabel</code>, <code>InScrollView</code> will still run on the class <code>DQLabel</code> (which inherits from <code>UILabel</code>).
/// *
/// \param rulesFor A dictionary where each key, the Class name or Accessibility Identifier of a view, has a <code>Set</code> of <code>Strings</code> containing Rule Id’s to ignore.
///
- (void)ignoreWithRulesFor:(NSDictionary<NSString *, NSSet<NSString *> *> * _Nonnull)rulesFor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class AxeView;
@class AxeDevice;
@class AxeImage;
@class AxeMetaData;

/// Lives within AxeResult and contains meta data about the scan, device information, the screenshot, and the view hierarchy.
SWIFT_CLASS("_TtC15axeDevToolsXCUI10AxeContext")
@interface AxeContext : NSObject
/// The view hierarchy of the scanned view.
@property (nonatomic, readonly, strong) AxeView * _Nonnull axeView;
/// Information about the device used for the scan.
@property (nonatomic, readonly, strong) AxeDevice * _Nonnull axeDevice;
/// A screenshot of the view that was scanned.
@property (nonatomic, readonly, strong) AxeImage * _Nonnull screenshot;
/// Additional meta data.
@property (nonatomic, strong) AxeMetaData * _Nonnull axeMetaData;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class AxeDevToolsResultKey;
@class AxeResult;

SWIFT_CLASS("_TtC15axeDevToolsXCUI11AxeDevTools")
@interface AxeDevTools : NSObject
/// Set this property if you want to change which rules are run or if you want to add custom rules.
@property (nonatomic, strong) AxeConf * _Nonnull configuration;
/// Set this property to <code>true</code> if you want additional debug information for unexpected behavior.
/// We may request this to be turned on if an obscure bug is found.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL debugStatements;)
+ (BOOL)debugStatements SWIFT_WARN_UNUSED_RESULT;
+ (void)setDebugStatements:(BOOL)value;
/// This function logs you into the cloud instance of axeDevTools. You must have a valid session before utilizing the framework’s features. This function can be called in App or Scene Delegate to set up manual tests (to show the Floating Action Button) and also can be used to set up automated tests.
/// <ul>
///   <li>
///     For Objective-C, pass in an empty String to the <code>url</code> parameter and the default server will be used.
///   </li>
///   <li>
///     Will throw an error if there were incorrect credentials.
///   </li>
///   <li>
///     Google authentication information does not work in this method.
///   </li>
/// </ul>
/// \param username Username for axeDevTools. Usually an email address.
///
/// \param password Password for axeDevTools.
///
/// \param url URL of the server receiving the scans if it’s not Deque’s service. This should only be filled out for enterprises with their own instance.
///
///
/// returns:
/// An instantiated AxeDevTools object.  You will not be able to scan anything without this object.
+ (AxeDevTools * _Nullable)loginWithUsername:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password toServer:(NSString * _Nonnull)url organization:(NSString * _Nullable)organization error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// This function logs you into the cloud instance of axeDevTools. You must have a valid session before utilizing the framework’s features. This function can be called in App or Scene Delegate to set up manual tests (to show the Floating Action Button) and also can be used to set up automated tests.
/// <ul>
///   <li>
///     For Objective-C, pass in an empty String to the <code>url</code> parameter and the default server will be used.
///   </li>
///   <li>
///     Will throw an error if there were incorrect credentials.
///   </li>
///   <li>
///     Google authentication information does not work in this method.
///   </li>
/// </ul>
/// \param apiKey API Key for axeDevTools.
///
/// \param url URL of the server receiving the scans if it’s not Deque’s service. This should only be filled out for enterprises with their own instance.
///
///
/// returns:
/// An instantiated AxeDevTools object.  You will not be able to scan anything without this object.
+ (AxeDevTools * _Nullable)loginWithAPIKey:(NSString * _Nonnull)apiKey toServer:(NSString * _Nonnull)url organization:(NSString * _Nullable)organization error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// This function logs you into the cloud instance of axeDevTools. You must have a valid session before utilizing the framework’s features. This function can be called in App or Scene Delegate to set up manual tests (to show the Floating Action Button) and also can be used to set up automated tests.  Use this version of login if you have a special instance of the server to log into.
/// <ul>
///   <li>
///     Google authentication information does not work in this method.
///   </li>
///   <li>
///     Will throw an error if there were incorrect credentials.
///   </li>
/// </ul>
/// \param accessToken If you require this method, a Deque representative will give you the information needed to create a valid AccessToken.
///
/// \param url URL of the server receiving the scans.  A Deque representative will give you the information needed to fill out this parameter.
///
///
/// returns:
/// initialized AxeDevTools object. Will throw an error if there was an issue logging in.
+ (AxeDevTools * _Nullable)loginWithAccessToken:(AccessToken * _Nonnull)accessToken toServer:(NSString * _Nonnull)url orgId:(NSString * _Nullable)orgId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This will be removed in our July/August release; please use login(withUsername, andPassword, toServer) instead");
/// Retrieves the scan from the server.  This can be used within UITests to assert things about a scan that was pushed to the server, such as the number of accessibility issues within a scan.  Will throw an error if there was an issue retrieving the scan.
/// \param resultKey The AxeDevToolsResultKey of the scan you would like to retrieve from the server.
///
///
/// returns:
/// The scan from the server.
- (AxeResult * _Nullable)getResult:(AxeDevToolsResultKey * _Nonnull)resultKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Use this after calling <code>run</code> to send the scan to the server.  Will throw an error if sending the scan was not successful.
/// \param result The result that should be pushed to the dashboard.
///
/// \param tags A list of tags that should be associated with the scan, as an array of String.
///
/// \param scanName A String to change the scan name to in the dashboard.
///
///
/// returns:
/// AxeDevToolsResultKey, which can be used to retrieve the scan from the server.
- (AxeDevToolsResultKey * _Nullable)postResult:(AxeResult * _Nonnull)result withTags:(NSArray<NSString *> * _Nonnull)tags withScanName:(NSString * _Nullable)scanName error:(NSError * _Nullable * _Nullable)error;
/// Tags the scan in the dashboard with the strings provided.  Will throw an error if there was an issue tagging the scan.
/// \param resultKey The AxeDevToolsResultKey of the scan you would like to tag.
///
/// \param tags The tags you would like to give the scan, as <code>[String]</code>.
///
- (BOOL)tagResult:(AxeDevToolsResultKey * _Nonnull)resultKey withTags:(NSArray<NSString *> * _Nonnull)tags error:(NSError * _Nullable * _Nullable)error;
/// Deletes the scan from the server.  The scan will no longer be available on the dashboard. Will throw an error if there was an issue deleting the scan.
/// \param resultKey the AxeDevToolsResultKey of the scan that should be deleted from the server.
///
- (BOOL)deleteResult:(AxeDevToolsResultKey * _Nonnull)resultKey error:(NSError * _Nullable * _Nullable)error;
/// Sets or updates the scan name that is displayed in the dashboard. Will throw an error if there was an issue (re)naming the scan.
/// \param resultKey The AxeDevToolsResultKey of the scan you would like to update.
///
/// \param scanName The name you would like to give the scan.
///
- (BOOL)updateScanName:(AxeDevToolsResultKey * _Nonnull)resultKey to:(NSString * _Nonnull)scanName error:(NSError * _Nullable * _Nullable)error;
/// Use this after calling <code>run</code> in your unit test to save the scan to your machine, as JSON.
/// note:
/// This function does not allow you to change the extension of the file; at this point in time it can only be saved as JSON.
/// This function will not overwrite a file if the file already exists.  Instead, it will attach a number to the end of the file name (for example, “<appIdentifier>-<screenTitle>-1.json”).
/// \param result The result that should be saved to your machine.
///
/// \param path Where you want the scan to be saved to, as a String.  The path will automatically be appended to your home directory.  If not specified, the scan will save into a folder called “AxeDevToolsResults” in your home directory (/Users/yourname/).
///
/// \param fileName What you want the file to be called, as a String. If not specified, the file’s name will be  “<appIdentifier>-<screenTitle>” or if scanName if specified, “<appIdentifier>-<scanName>”.
///
/// \param scanName What you want the scan to be called. If not specified, the scanName will be “<screenTitle>”
///
///
/// returns:
/// String, the path to the saved file.
- (NSString * _Nullable)saveResult:(AxeResult * _Nonnull)result toPath:(NSString * _Nonnull)path withFileName:(NSString * _Nonnull)fileName withScanName:(NSString * _Nullable)scanName error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Use this in a UITest to analyze the accessibility of an application.  Useful in testing views built in SwiftUI, Native iOS or React Native.
/// \param onBundleIdentifier The bundle identifier of the application to test. Application must be loaded at the time of the test.
///
///
/// returns:
/// the scan, as an AxeResult.
- (AxeResult * _Nullable)runOnBundleIdentifier:(NSString * _Nonnull)bundleId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Use this in a UITest to analyze the accessibility of a screen or a view. Useful in testing views built in SwiftUI, Native iOS or React Native.
/// \param onElement The root element of the screen you wanted tested, or one component.  Must be an XCUIElement.
///
///
/// returns:
/// the scan, as an AxeResult.
- (AxeResult * _Nullable)runOnElement:(id _Nonnull)element error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A scan’s unique identifier on the axeDevTools Mobile server. You can use the AxeDevToolsResultKey to retrieve, tag, and
/// delete scans on the server.
SWIFT_CLASS("_TtC15axeDevToolsXCUI20AxeDevToolsResultKey")
@interface AxeDevToolsResultKey : NSObject
/// The name of the application that the scan came from. Should be the Bundle Identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull packageName;
/// A unique String associated with the user who pushed up the scan.  This is not the same as the username.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// A unique String associated with the specific scan.
@property (nonatomic, readonly, copy) NSString * _Nonnull resultId;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Use this in UI Testing to convert the Floating Action Button title into a valid AxeDevToolsResultKey.  This can then be used to retrieve the scan from the server, tag it, change its name, and delete it.
/// This initializer will return <code>nil</code> if the given String is not in the expected format.  If supplying the FAB’s title directly and this method is returning <code>nil</code>, it may mean that there was an error sending the scan to the server.
/// \param fabTitle The FloatingActionButton’s <code>title</code> or <code>label</code> property after it is tapped.
///
- (nullable instancetype)initWithFabTitle:(NSString * _Nonnull)fabTitle OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Information about the device used when the scan was created.
SWIFT_CLASS("_TtC15axeDevToolsXCUI9AxeDevice")
@interface AxeDevice : NSObject
/// The name of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The operating system that the device was running. Will likely be “iOS”.
@property (nonatomic, readonly, copy) NSString * _Nonnull os;
/// The iOS version that the device was running at the time of the scan.
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// The device’s screen height, in pixels
@property (nonatomic, readonly) float screenHeight;
/// The device’s screen width, in pixels
@property (nonatomic, readonly) float screenWidth;
/// The number of pixels in one iOS point (pt)
@property (nonatomic, readonly) float scale;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// the type of object.  Derived from XCUIElement <code>ElementType</code>.
typedef SWIFT_ENUM(NSUInteger, AxeElementType, open) {
  AxeElementTypeAny = 0,
/// any view not otherwise described by the other options available in this enum.
  AxeElementTypeOther = 1,
  AxeElementTypeApplication = 2,
  AxeElementTypeWindow = 4,
  AxeElementTypeSheet = 5,
  AxeElementTypeAlert = 7,
  AxeElementTypeButton = 9,
  AxeElementTypeKeyboard = 19,
  AxeElementTypeKey = 20,
  AxeElementTypeNavigationBar = 21,
  AxeElementTypeTabBar = 22,
  AxeElementTypeTabGroup = 23,
  AxeElementTypeToolbar = 24,
  AxeElementTypeStatusBar = 25,
  AxeElementTypeTable = 26,
  AxeElementTypeCollectionView = 32,
  AxeElementTypeSlider = 33,
  AxeElementTypePageIndicator = 34,
  AxeElementTypeProgressIndicator = 35,
  AxeElementTypeActivityIndicator = 36,
  AxeElementTypeSegmentedControl = 37,
  AxeElementTypePicker = 38,
  AxeElementTypePickerWheel = 39,
  AxeElementTypeSwitch = 40,
  AxeElementTypeToggle = 41,
  AxeElementTypeLink = 42,
  AxeElementTypeImage = 43,
  AxeElementTypeSearchField = 45,
  AxeElementTypeScrollView = 46,
  AxeElementTypeScrollBar = 47,
  AxeElementTypeStaticText = 48,
  AxeElementTypeTextField = 49,
  AxeElementTypeSecureTextField = 50,
  AxeElementTypeDatePicker = 51,
  AxeElementTypeTextView = 52,
  AxeElementTypeMap = 57,
  AxeElementTypeWebView = 58,
  AxeElementTypeCell = 75,
  AxeElementTypeStepper = 79,
  AxeElementTypeTab = 80,
};


/// A screenshot of a view, or the entire device’s screen.
SWIFT_CLASS("_TtC15axeDevToolsXCUI8AxeImage")
@interface AxeImage : NSObject
/// The screenshot, converted to base64
@property (nonatomic, readonly, copy) NSString * _Nonnull base64png;
/// The size of the image, in pixels
@property (nonatomic, readonly, strong) AxeBounds * _Nonnull frame;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// How serious a failure of a rule is.
typedef SWIFT_ENUM(NSInteger, AxeImpact, open) {
/// the application is usable but has some annoyances. This is the least severe impact.
  AxeImpactMINOR = 0,
/// the application is usable but may be slightly more difficult to use for some users.
  AxeImpactMODERATE = 1,
/// the application is difficult to use for some users.
  AxeImpactSERIOUS = 2,
/// the application may not be usable or may be very difficult to use for some users.
  AxeImpactCRITICAL = 3,
};


/// The meta data of a scan.
SWIFT_CLASS("_TtC15axeDevToolsXCUI11AxeMetaData")
@interface AxeMetaData : NSObject
/// The application that was scanned
@property (nonatomic, readonly, copy) NSString * _Nonnull appIdentifier;
/// The time that the scan occurred
@property (nonatomic, readonly) int64_t analysisTimestamp;
/// The version of axeDevTools iOS used
@property (nonatomic, readonly, copy) NSString * _Nonnull axeVersion;
/// The title of the screen that was scanned, if available
@property (nonatomic, copy) NSString * _Nonnull screenTitle;
@property (nonatomic, readonly) BOOL isFullScreenForML;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSUInteger, AxeOrientation, open) {
  AxeOrientationAll = 0,
  AxeOrientationPortrait = 1,
  AxeOrientationLandscape = 2,
};


/// A location on the screen, either in pixels or iOS points (pt). Usually converted from a CGPoint
SWIFT_CLASS("_TtC15axeDevToolsXCUI8AxePoint")
@interface AxePoint : NSObject
/// The horizontal location of the point.
@property (nonatomic, readonly) NSInteger x;
/// The vertical location of the point.
@property (nonatomic, readonly) NSInteger y;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// AxeProps are all properties used to help identify views in an application and to figure out whether a view is accessible
SWIFT_CLASS("_TtC15axeDevToolsXCUI8AxeProps")
@interface AxeProps : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates an empty AxeProps object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@class AxeRuleResult;

/// This class contains all the information from one accessibility scan of a screen.  This is a Swift representation of the JSON sent to the axe DevTools Mobile server (if using UI automated tests or manual tests). This can be used to assert number of accessibility failures and passes on one screen.  It also contains the view hierarchy of what was scanned and which rules were run.
SWIFT_CLASS("_TtC15axeDevToolsXCUI9AxeResult")
@interface AxeResult : NSObject
@property (nonatomic, copy) NSString * _Nullable scanName;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tags;
/// The configuration of the scan
@property (nonatomic, readonly, strong) AxeConf * _Nonnull axeConf;
/// Information about the screen that was scanned
@property (nonatomic, readonly, strong) AxeContext * _Nonnull axeContext;
/// A list of failing, passing, ignored, and incomplete results
@property (nonatomic, readonly, copy) NSArray<AxeRuleResult *> * _Nonnull axeRuleResults;
/// All failures in the scan
@property (nonatomic, readonly, copy) NSArray<AxeRuleResult *> * _Nonnull failures;
/// All passes in the scan
@property (nonatomic, readonly, copy) NSArray<AxeRuleResult *> * _Nonnull passes;
/// All incompletes in the scan
@property (nonatomic, readonly, copy) NSArray<AxeRuleResult *> * _Nonnull incompletes;
/// A complete description of the result.  Contains summaries for each rule and prints out information about
/// any failing views.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Summary of the scan. Contains the number of failures, passes, and incompletes.
@property (nonatomic, readonly, copy) NSString * _Nonnull shortDescription;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The view’s primary purpose.
typedef SWIFT_ENUM(NSInteger, AxeRole, open) {
/// The view’s primary purpose is to display text. Views that can be interacted with by a user, even if they also display text, are counted as controls.
  AxeRoleTextElement = 0,
/// The view’s primary purpose is to be interacted with by the user.  Views that have text within them that are also actionable (such as buttons, textFields, etc) are counted as controls.
  AxeRoleControl = 1,
/// The view’s primary purpose is to display an image.
  AxeRoleImage = 2,
/// The view’s primary purpose is otherwise not mentioned (layout views, background views, etc).
  AxeRoleGenericElement = 3,
};

/// A unique name for each of the rules run by default.
typedef SWIFT_ENUM(NSInteger, AxeRuleId, open) {
  AxeRuleIdA11yElementFocusBox = 0,
  AxeRuleIdActiveControlName = 1,
  AxeRuleIdAssociatedText = 2,
  AxeRuleIdCollidingControls = 3,
  AxeRuleIdCollidingViews = 4,
  AxeRuleIdColorContrast = 5,
  AxeRuleIdConflictingTraits = 6,
  AxeRuleIdFocusableText = 7,
  AxeRuleIdImageViewName = 8,
  AxeRuleIdInScrollView = 9,
  AxeRuleIdInaccessibleAction = 10,
  AxeRuleIdLabelAtFront = 11,
  AxeRuleIdLabelInName = 12,
  AxeRuleIdMeaningfulAccessibleName = 13,
  AxeRuleIdNestedElementsName = 14,
  AxeRuleIdScreenOrientation = 15,
  AxeRuleIdScreenTitle = 16,
  AxeRuleIdSupportsDynamicType = 17,
  AxeRuleIdTouchTargetSize = 18,
  AxeRuleIdTouchTargetSpacing = 19,
};

enum AxeStatus : NSInteger;
enum AxeStandard : NSInteger;

/// A summary of one rule being run on one view.
SWIFT_CLASS("_TtC15axeDevToolsXCUI13AxeRuleResult")
@interface AxeRuleResult : NSObject
/// whether the view passed, failed, or returned incomplete on the rule
@property (nonatomic, readonly) enum AxeStatus status;
/// refers to the end-user impact behind issues found in your scans.
/// Read more about impact in the References section of
/// axe DevTools Mobile docs at docs.deque.com.
@property (nonatomic, readonly) enum AxeImpact impact;
/// the name of the rule that was run on the view
@property (nonatomic, readonly, copy) NSString * _Nonnull ruleId;
/// a brief description of the rule that was run on the view
@property (nonatomic, readonly, copy) NSString * _Nonnull ruleSummary;
/// the properties used to determine whether the view passes or fails a rule
@property (nonatomic, readonly, strong) AxeProps * _Nonnull props;
/// the view’s identifier, calculated from its hash
/// This is identical to the AxeViewId present in AxeView
@property (nonatomic, readonly, copy) NSString * _Nonnull axeViewId;
/// whether the view is in the current screenshot.  Will be false if the view is off-screen or behind a modal.
@property (nonatomic, readonly) BOOL isVisibleToUser;
/// Whether a rule is currently experimental or not.
@property (nonatomic, readonly) BOOL experimental;
/// The standard that the rule falls under (WCAG, Best practice, etc). See <code>AxeStandard</code> for more information.
@property (nonatomic, readonly) enum AxeStandard standard;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A list of standards that the rule may fall under.
typedef SWIFT_ENUM(NSInteger, AxeStandard, open) {
/// The rule detects a failure of a WCAG 2.0 Success Criteria
  AxeStandardWCAG_20 = 0,
/// The rule detects a failure of a WCAG 2.1 Success Criteria
  AxeStandardWCAG_21 = 1,
/// The rule detects a failure of a WCAG 2.2 Success Criteria
  AxeStandardWCAG_22 = 2,
/// The rule is a recommendation from Apple Design Guidelines
  AxeStandardPLATFORM = 3,
/// The rule is a recommendation from Deque on how to best make your app accessible.  The rule may also follow a WCAG Best Practice.
  AxeStandardBEST_PRACTICE = 4,
};

/// A set of options for when a rule is run on a view.
typedef SWIFT_ENUM(NSInteger, AxeStatus, open) {
/// The view was not applicable to the rule.
  AxeStatusINAPPLICABLE = 0,
/// The view ran into an error and needs to be reviewed for accessibility manually.
  AxeStatusINCOMPLETE = 1,
/// The view does not have an accessibility issue.
  AxeStatusPASS = 2,
/// The view has an accessibility issue.
  AxeStatusFAIL = 3,
/// The view was not checked for accessibility issues.
  AxeStatusIGNORED = 4,
};


SWIFT_CLASS("_TtC15axeDevToolsXCUI9AxeTraits")
@interface AxeTraits : NSObject
@property (nonatomic) uint64_t rawValue;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRawValue:(uint64_t)raw OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(AxeTraits * _Nonnull)other;
- (void)formIntersection:(AxeTraits * _Nonnull)other;
- (void)formSymmetricDifference:(AxeTraits * _Nonnull)other;
/// Same as UIAccessibilityTraits.adjustable
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull adjustable;)
+ (AxeTraits * _Nonnull)adjustable SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.allowsDirectInteraction
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull allowsDirectInteraction;)
+ (AxeTraits * _Nonnull)allowsDirectInteraction SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.button
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull button;)
+ (AxeTraits * _Nonnull)button SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.causesPageTurn
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull causesPageTurn;)
+ (AxeTraits * _Nonnull)causesPageTurn SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.header
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull header;)
+ (AxeTraits * _Nonnull)header SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.image
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull image;)
+ (AxeTraits * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.keyboardKey
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull keyboardKey;)
+ (AxeTraits * _Nonnull)keyboardKey SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.link
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull link;)
+ (AxeTraits * _Nonnull)link SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.none
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull none;)
+ (AxeTraits * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.notEnabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull notEnabled;)
+ (AxeTraits * _Nonnull)notEnabled SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.playsSound
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull playsSound;)
+ (AxeTraits * _Nonnull)playsSound SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.searchField
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull searchField;)
+ (AxeTraits * _Nonnull)searchField SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.selected
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull selected;)
+ (AxeTraits * _Nonnull)selected SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.startsMediaSession
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull startsMediaSession;)
+ (AxeTraits * _Nonnull)startsMediaSession SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.staticText
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull staticText;)
+ (AxeTraits * _Nonnull)staticText SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.summaryElement
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull summaryElement;)
+ (AxeTraits * _Nonnull)summaryElement SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.tabBar
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull tabBar;)
+ (AxeTraits * _Nonnull)tabBar SWIFT_WARN_UNUSED_RESULT;
/// Same as UIAccessibilityTraits.updatesFrequently
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AxeTraits * _Nonnull updatesFrequently;)
+ (AxeTraits * _Nonnull)updatesFrequently SWIFT_WARN_UNUSED_RESULT;
/// Converts an AxeTrait into an easily readable String.
///
/// returns:
/// The name of the AxeTrait. If there are multiple traits within an AxeTraits object, the traits will be in a comma-separated String.  For example, <code>(.button | .adjustable).toString()</code> would return <code>Adjustable, Button</code>.
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
@end

enum RunStatus : NSInteger;

/// A class representing one view in a view hierarchy.
SWIFT_CLASS("_TtC15axeDevToolsXCUI7AxeView")
@interface AxeView : NSObject
/// name of the original class, as a String (UIButton, UIWindow, DQButton, etc).
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
/// the type of object.  We use this to help determine whether a rule should be run on a specific view.  AxeElementTypes are derived from XCUIElement <code>ElementType</code>.
@property (nonatomic, readonly) enum AxeElementType elementType;
/// the view’s on-screen coordinates, in pixels (not pt).
@property (nonatomic, readonly, strong) AxeBounds * _Nonnull boundsInScreen;
/// the view’s accessibility identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityIdentifier;
/// the view’s accessible name.  This is usually equivalent to the view’s accessibilityLabel or its visible text.  Will be <code>nil</code> if the view is not focusable by VoiceOver.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// the type of the view.  See <code>AxeRole</code> for more information.
@property (nonatomic, readonly) enum AxeRole role;
/// the view’s state, if it has one.  Will be <code>nil</code> if the view is not a control.
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// the view’s value, if it has one.  Will be <code>nil</code> if the view does not have a changeable value.  Switches, sliders, steppers, etc, all have values.
@property (nonatomic, readonly, copy) NSString * _Nullable value;
/// whether a view can be directly focused by VoiceOver. This property is calculated from isAccessibilityElement, and will be false for any child views within a VoiceOver-focusable view.
@property (nonatomic, readonly) BOOL isAccessibilityFocusable;
/// The view’s subviews, as AxeViews
@property (nonatomic, readonly, copy) NSArray<AxeView *> * _Nonnull children;
/// The view’s parent, as an AxeView.
@property (nonatomic, weak) AxeView * _Nullable parent;
/// a unique identifier for the view.  The axeViewId will change between scans of the same view.
@property (nonatomic, readonly, copy) NSString * _Nonnull axeViewId;
/// whether a view can be seen on-screen at the time of the scan.  Will return false if the view is off-screen or behind a modal or other views (such as a tab bar or a navigation bar).
@property (nonatomic, readonly) BOOL isVisibleToUser;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Runs through the view hierarchy in a depth-first search, with the view that this method was called on as the “root” view.
/// \param function The function that should be run on the view hierarchy.
///
///
/// returns:
/// Whether to continue running through the view hierarchy.  See <code>RunStatus</code> for more information.
- (enum RunStatus)runOnSelfAndDescendants:(SWIFT_NOESCAPE enum RunStatus (^ _Nonnull)(AxeView * _Nonnull))function;
/// Finds whether the view’s provided property is true or has an ancestor whose provided property is true.
/// important:
/// <code>propName</code> must be the name of a property that is a <code>Bool</code>. If it is not, this method will log an error into the console and automatically return false.
/// \param propName a property that is a <code>Bool</code> that the view or an ancestor of the view may have set to true.
///
///
/// returns:
/// true if the view’s property is true or is a child of a view whose provided property is true; false otherwise.
- (BOOL)isPropTypeOrChildOfProp:(NSString * _Nonnull)propName SWIFT_WARN_UNUSED_RESULT;
/// Finds whether the view has an ancestor whose provided property is true.
/// important:
/// <code>propName</code> must be the name of a property that is a <code>Bool</code>. If it is not, this method will log an error into the console and automatically return false.
/// \param propName a property that is a <code>Bool</code> that an ancestor of the view may have set to true.
///
///
/// returns:
/// true if the view is a child of a view whose provided property is true; false otherwise.
- (BOOL)isChildOfProp:(NSString * _Nonnull)propName SWIFT_WARN_UNUSED_RESULT;
/// Checks whether an ancestor of this view is of the elementType provided.
/// \param elementType the type that the ancestor may be.
///
///
/// returns:
/// true if the view is a child of the elementType provided, otherwise false.
- (BOOL)isChildOfElementType:(enum AxeElementType)elementType SWIFT_WARN_UNUSED_RESULT;
/// Finds whether the view is of the elementType provided, or if the view has an ancestor that is of the elementType provided.
/// \param elementType the type that the view or an ancestor of the view may be.
///
///
/// returns:
/// true if the view is the elementType provided or if it is a child of the elementType provided; false otherwise.
- (BOOL)isElementOrChildOfElementType:(enum AxeElementType)elementType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// An object that holds information about the rule, including a brief description, the severity of a failure of the rule, and whether the rule is classified as a WCAG Success Criteria.
SWIFT_CLASS("_TtC15axeDevToolsXCUI8RuleConf")
@interface RuleConf : NSObject
/// Whether a rule is currently experimental or not.
@property (nonatomic, readonly) BOOL experimental;
/// A brief description of the rule.
@property (nonatomic, readonly, copy) NSString * _Nonnull summary;
/// The standard that the rule falls under (WCAG, Best practice, etc). See <code>AxeStandard</code> for more information.
@property (nonatomic, readonly) enum AxeStandard standard;
/// The severity of a failure of the rule. See <code>AxeImpact</code> for more information.
@property (nonatomic, readonly) enum AxeImpact impact;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Whether the view hierarchy should continue to be traversed.
typedef SWIFT_ENUM(NSInteger, RunStatus, open) {
/// The view hierarchy should continue to be traversed.
  RunStatusContinue = 0,
/// The view hierarchy should no longer be traversed and will immediately stop at this point.
  RunStatusStop = 1,
/// The view hierarchy should continue to be traversed along siblings of this view and their descendants, but should not traverse through child elements of this view.
  RunStatusSkipDescendants = 2,
};





SWIFT_CLASS("_TtC15axeDevToolsXCUI16UsageServiceBody")
@interface UsageServiceBody : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
