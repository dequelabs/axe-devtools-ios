// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name axeDevToolsXCUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import Foundation
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AxeImage : ObjectiveC.NSObject {
  @objc final public let base64png: Swift.String
  @objc final public let frame: axeDevToolsXCUI.AxeBounds
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers open class AxeRule : Swift.Hashable {
  public static func == (lhs: axeDevToolsXCUI.AxeRule, rhs: axeDevToolsXCUI.AxeRule) -> Swift.Bool
  final public let id: Swift.String
  public var summary: Swift.String {
    get
  }
  public var passingDescription: Swift.String?
  public var standard: axeDevToolsXCUI.AxeStandard {
    get
  }
  public var impact: axeDevToolsXCUI.AxeImpact {
    get
  }
  public init(ruleConf: axeDevToolsXCUI.RuleConf)
  open func setUp(_ context: axeDevToolsXCUI.AxeContext)
  open func collectProps(for node: axeDevToolsXCUI.AxeView) -> axeDevToolsXCUI.AxeProps
  open func runRule(_ props: axeDevToolsXCUI.AxeProps) throws -> axeDevToolsXCUI.AxeStatus
  open func tearDown()
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class UsageServiceBody : ObjectiveC.NSObject, Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
  public enum CodingKeys : Swift.CodingKey {
    case version
    case event
    case productName
    case organization
    case productComponent
    case productComponentVersion
    case distinctId
    case userId
    case dateTime
    public static func == (a: axeDevToolsXCUI.UsageServiceBody.CodingKeys, b: axeDevToolsXCUI.UsageServiceBody.CodingKeys) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public var hashValue: Swift.Int {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@objc public enum AxeRole : Swift.Int {
  case textElement
  case control
  case image
  case genericElement
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsXCUI.AxeRole]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsXCUI.AxeRole] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AxeMetaData : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let appIdentifier: Swift.String
  @objc final public let analysisTimestamp: Swift.Int64
  @objc final public let axeVersion: Swift.String
  @objc public var screenTitle: Swift.String
  @objc final public let isFullScreenForML: Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public enum AxeStatus : Swift.Int {
  case INAPPLICABLE = 0
  case INCOMPLETE = 1
  case PASS = 2
  case FAIL = 3
  case IGNORED = 4
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsXCUI.AxeStatus]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsXCUI.AxeStatus] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AxeView : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let className: Swift.String
  @objc final public let elementType: axeDevToolsXCUI.AxeElementType
  @objc final public let boundsInScreen: axeDevToolsXCUI.AxeBounds
  @objc final public let accessibilityIdentifier: Swift.String?
  @objc final public let name: Swift.String?
  @objc final public let role: axeDevToolsXCUI.AxeRole
  @objc final public let state: Swift.String?
  @objc final public let value: Swift.String?
  @objc public var isAccessibilityFocusable: Swift.Bool {
    get
  }
  @objc public var children: [axeDevToolsXCUI.AxeView] {
    get
  }
  @objc weak public var parent: axeDevToolsXCUI.AxeView?
  @objc public var axeViewId: Swift.String {
    @objc get
  }
  @objc public var isVisibleToUser: Swift.Bool {
    get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @discardableResult
  @objc public func runOnSelfAndDescendants(_ function: (axeDevToolsXCUI.AxeView) -> axeDevToolsXCUI.RunStatus) -> axeDevToolsXCUI.RunStatus
  public func getOrError(prop: axeDevToolsXCUI.AxeProps.Name) throws -> (any Swift.Decodable & Swift.Encodable)?
  public func get(prop: axeDevToolsXCUI.AxeProps.Name) -> (any Swift.Decodable & Swift.Encodable)?
  public func getOrError<T>(prop name: axeDevToolsXCUI.AxeProps.Name, withType t: T.Type) throws -> T where T : Swift.Decodable, T : Swift.Encodable
  public func get<T>(prop name: axeDevToolsXCUI.AxeProps.Name, withType t: T.Type) -> T? where T : Swift.Decodable, T : Swift.Encodable
  @objc public func isPropTypeOrChild(ofProp propName: axeDevToolsXCUI.AxeProps.Name) -> Swift.Bool
  @objc public func isChild(ofProp propName: axeDevToolsXCUI.AxeProps.Name) -> Swift.Bool
  @objc public func isChild(ofElementType elementType: axeDevToolsXCUI.AxeElementType) -> Swift.Bool
  @objc public func isElementOrChild(ofElementType elementType: axeDevToolsXCUI.AxeElementType) -> Swift.Bool
  @objc deinit
}
@objc public class RuleConf : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let experimental: Swift.Bool
  @objc final public let summary: Swift.String
  @objc final public let standard: axeDevToolsXCUI.AxeStandard
  @objc public var impact: axeDevToolsXCUI.AxeImpact {
    get
  }
  public init(impact: axeDevToolsXCUI.AxeImpact, standard: axeDevToolsXCUI.AxeStandard, summary: Swift.String, experimental: Swift.Bool = false)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AxeDevToolsResultKey : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let packageName: Swift.String
  @objc final public let userId: Swift.String
  @objc final public let resultId: Swift.String
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public init?(fabTitle: Swift.String)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc final public class AxeConf : ObjectiveC.NSObject, Swift.Codable {
  final public var customRules: Swift.Set<axeDevToolsXCUI.AxeRule> {
    get
    set
  }
  final public var optInToSupportsDynamicType: Swift.Bool {
    get
    set
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc final public func ignore(rule: Swift.String, _ shouldIgnore: Swift.Bool = true)
  @objc final public func ignore(rules: [Swift.String], _ shouldIgnore: Swift.Bool = true)
  @objc final public func ignore(rulesFor: [Swift.String : Swift.Set<Swift.String>])
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc public enum RunStatus : Swift.Int {
  case Continue
  case Stop
  case SkipDescendants
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AxeRuleResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let status: axeDevToolsXCUI.AxeStatus
  @objc final public let impact: axeDevToolsXCUI.AxeImpact
  @objc final public let ruleId: Swift.String
  @objc final public let ruleSummary: Swift.String
  @objc final public let props: axeDevToolsXCUI.AxeProps
  @objc final public let axeViewId: Swift.String
  @objc final public let isVisibleToUser: Swift.Bool
  @objc final public let experimental: Swift.Bool
  @objc final public let standard: axeDevToolsXCUI.AxeStandard
  @nonobjc public var axeRuleId: axeDevToolsXCUI.AxeRuleId? {
    get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AxeRect : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let left: Swift.Float
  @objc final public let right: Swift.Float
  @objc final public let top: Swift.Float
  @objc final public let bottom: Swift.Float
  @objc public var height: Swift.Float {
    @objc get
  }
  @objc public var width: Swift.Float {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public enum AxeOrientation : Swift.UInt, Swift.Codable {
  case all = 0
  case portrait = 1
  case landscape = 2
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.UInt)
  public typealias AllCases = [axeDevToolsXCUI.AxeOrientation]
  public typealias RawValue = Swift.UInt
  public static var allCases: [axeDevToolsXCUI.AxeOrientation] {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public enum AxeRuleId : Swift.Int {
  case A11yElementFocusBox
  case ActiveControlName
  case AssociatedText
  case CollidingControls
  case CollidingViews
  case ColorContrast
  case ConflictingTraits
  case FocusableText
  case ImageViewName
  case InScrollView
  case InaccessibleAction
  case LabelAtFront
  case LabelInName
  case MeaningfulAccessibleName
  case NestedElementsName
  case ScreenOrientation
  case ScreenTitle
  case SupportsDynamicType
  case TouchTargetSize
  case TouchTargetSpacing
  public init?(_ str: Swift.String)
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsXCUI.AxeRuleId]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsXCUI.AxeRuleId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AxeElementType : Swift.UInt {
  case any = 0
  case other = 1
  case application = 2
  case window = 4
  case sheet = 5
  case alert = 7
  case button = 9
  case keyboard = 19
  case key = 20
  case navigationBar = 21
  case tabBar = 22
  case tabGroup = 23
  case toolbar = 24
  case statusBar = 25
  case table = 26
  case collectionView = 32
  case slider = 33
  case pageIndicator = 34
  case progressIndicator = 35
  case activityIndicator = 36
  case segmentedControl = 37
  case picker = 38
  case pickerWheel = 39
  case `switch` = 40
  case toggle = 41
  case link = 42
  case image = 43
  case searchField = 45
  case scrollView = 46
  case scrollBar = 47
  case staticText = 48
  case textField = 49
  case secureTextField = 50
  case datePicker = 51
  case textView = 52
  case map = 57
  case webView = 58
  case cell = 75
  case stepper = 79
  case tab = 80
  public func toString() -> Swift.String
  public init?(rawValue: Swift.UInt)
  public typealias AllCases = [axeDevToolsXCUI.AxeElementType]
  public typealias RawValue = Swift.UInt
  public static var allCases: [axeDevToolsXCUI.AxeElementType] {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AxeResult : ObjectiveC.NSObject, Swift.Codable {
  @objc public var scanName: Swift.String?
  @objc public var tags: [Swift.String]?
  @objc final public let axeConf: axeDevToolsXCUI.AxeConf
  @objc final public let axeContext: axeDevToolsXCUI.AxeContext
  @objc final public let axeRuleResults: [axeDevToolsXCUI.AxeRuleResult]
  @objc public var failures: [axeDevToolsXCUI.AxeRuleResult] {
    @objc get
  }
  @objc public var passes: [axeDevToolsXCUI.AxeRuleResult] {
    @objc get
  }
  @objc public var incompletes: [axeDevToolsXCUI.AxeRuleResult] {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var shortDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class AxeBounds : axeDevToolsXCUI.AxeRect {
  @objc override final public var description: Swift.String {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension Swift.String {
  public static let label: Swift.String
  public static let isSwiftUIApp: Swift.String
}
@_hasMissingDesignatedInitializers @objc public class AxePoint : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let x: Swift.Int
  @objc final public let y: Swift.Int
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  convenience required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AxeContext : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let axeView: axeDevToolsXCUI.AxeView
  @objc final public let axeDevice: axeDevToolsXCUI.AxeDevice
  @objc final public let screenshot: axeDevToolsXCUI.AxeImage
  @objc public var axeMetaData: axeDevToolsXCUI.AxeMetaData
  required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public enum AxeStandard : Swift.Int {
  case WCAG_20
  case WCAG_21
  case WCAG_22
  case PLATFORM
  case BEST_PRACTICE
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsXCUI.AxeStandard]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsXCUI.AxeStandard] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AxeDevice : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc final public let os: Swift.String
  @objc final public let osVersion: Swift.String
  @objc final public let screenHeight: Swift.Float
  @objc final public let screenWidth: Swift.Float
  @objc final public let scale: Swift.Float
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class AxeProps : ObjectiveC.NSObject, Swift.Codable {
  public typealias Name = Swift.String
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  final public func get(_ name: axeDevToolsXCUI.AxeProps.Name) -> (any Swift.Decodable & Swift.Encodable)?
  final public func getOrError(_ name: axeDevToolsXCUI.AxeProps.Name) throws -> (any Swift.Decodable & Swift.Encodable)?
  final public func get<T>(_ name: axeDevToolsXCUI.AxeProps.Name, withType objType: T.Type) -> T? where T : Swift.Decodable, T : Swift.Encodable
  final public func getOrError<T>(_ name: axeDevToolsXCUI.AxeProps.Name, withType objType: T.Type) throws -> T where T : Swift.Decodable, T : Swift.Encodable
  final public func add(_ props: [axeDevToolsXCUI.AxeProps.Name : (any Swift.Decodable & Swift.Encodable)?])
  final public func add(_ propName: axeDevToolsXCUI.AxeProps.Name, _ prop: (any Swift.Decodable & Swift.Encodable)?)
  final public func remove(_ propName: axeDevToolsXCUI.AxeProps.Name)
  @objc deinit
}
extension Swift.String {
  public static let className: Swift.String
  public static let elementType: Swift.String
  public static let axeViewId: Swift.String
  public static let parent: Swift.String
  public static let children: Swift.String
  public static let boundsInScreen: Swift.String
  public static let isAccessibilityFocusable: Swift.String
  public static let accessibilityIdentifier: Swift.String
  public static let name: Swift.String
  public static let role: Swift.String
  public static let state: Swift.String
  public static let value: Swift.String
  public static let isVisibleToUser: Swift.String
  public static let isHeaderOrFooter: Swift.String
  public static let isEnabled: Swift.String
  public static let text: Swift.String
  public static let frame: Swift.String
  public static let isActiveControl: Swift.String
  public static let isAccessibilityElement: Swift.String
  public static let accessibilityPath: Swift.String
  public static let accessibilityTraits: Swift.String
  public static let supportedOrientations: Swift.String
  public static let accessibilityActivationPoint: Swift.String
  public static let actions: Swift.String
  public static let keyboardOnScreen: Swift.String
}
@_hasMissingDesignatedInitializers @objc final public class AxeDevTools : ObjectiveC.NSObject {
  @objc final public var configuration: axeDevToolsXCUI.AxeConf {
    @objc get
    @objc set
  }
  @objc public static var debugStatements: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "The organization parameter of this method will be removed in a future release; please refer to our docs for more information.")
  @objc public static func login(withUsername username: Swift.String, andPassword password: Swift.String, toServer url: Swift.String = "", organization: Swift.String? = nil) throws -> axeDevToolsXCUI.AxeDevTools
  @objc public static func login(withUsername username: Swift.String, andPassword password: Swift.String, toServer url: Swift.String = "") throws -> axeDevToolsXCUI.AxeDevTools
  @available(*, deprecated, message: "The organization parameter of this method will be removed in a future release; please refer to our docs for more information.")
  @objc public static func login(withAPIKey apiKey: Swift.String, toServer url: Swift.String = "", organization: Swift.String? = nil) throws -> axeDevToolsXCUI.AxeDevTools
  @objc public static func login(withAPIKey apiKey: Swift.String, toServer url: Swift.String = "") throws -> axeDevToolsXCUI.AxeDevTools
  @available(*, deprecated, message: "This method will be removed in our July/August release; please use login(withUsername, andPassword, toServer) instead")
  @objc public static func login(withAccessToken accessToken: axeDevToolsXCUI.AccessToken, toServer url: Swift.String = "", orgId: Swift.String? = nil) throws -> axeDevToolsXCUI.AxeDevTools
  @objc final public func getResult(_ resultKey: axeDevToolsXCUI.AxeDevToolsResultKey) throws -> axeDevToolsXCUI.AxeResult
  @discardableResult
  @objc final public func postResult(_ result: axeDevToolsXCUI.AxeResult, withTags tags: [Swift.String] = [], withScanName scanName: Swift.String? = nil) throws -> axeDevToolsXCUI.AxeDevToolsResultKey
  @objc final public func tagResult(_ resultKey: axeDevToolsXCUI.AxeDevToolsResultKey, withTags tags: [Swift.String]) throws
  @objc final public func deleteResult(_ resultKey: axeDevToolsXCUI.AxeDevToolsResultKey) throws
  @objc final public func updateScanName(_ resultKey: axeDevToolsXCUI.AxeDevToolsResultKey, to scanName: Swift.String) throws
  @objc final public func saveResult(_ result: axeDevToolsXCUI.AxeResult, toPath path: Swift.String = "AxeDevToolsResults", withFileName fileName: Swift.String = "", withScanName scanName: Swift.String? = nil) throws -> Swift.String
  @objc final public func run(onBundleIdentifier bundleId: Swift.String) throws -> axeDevToolsXCUI.AxeResult
  @objc final public func run(onElement element: Any) throws -> axeDevToolsXCUI.AxeResult
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AxeTraits : ObjectiveC.NSObject, Swift.Codable, Swift.OptionSet {
  @objc public var rawValue: Swift.UInt64
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc required override dynamic public init()
  @objc required public init(rawValue raw: Swift.UInt64)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public func formUnion(_ other: axeDevToolsXCUI.AxeTraits)
  @objc public func formIntersection(_ other: axeDevToolsXCUI.AxeTraits)
  @objc public func formSymmetricDifference(_ other: axeDevToolsXCUI.AxeTraits)
  @objc public static let adjustable: axeDevToolsXCUI.AxeTraits
  @objc public static let allowsDirectInteraction: axeDevToolsXCUI.AxeTraits
  @objc public static let button: axeDevToolsXCUI.AxeTraits
  @objc public static let causesPageTurn: axeDevToolsXCUI.AxeTraits
  @objc public static let header: axeDevToolsXCUI.AxeTraits
  @objc public static let image: axeDevToolsXCUI.AxeTraits
  @objc public static let keyboardKey: axeDevToolsXCUI.AxeTraits
  @objc public static let link: axeDevToolsXCUI.AxeTraits
  @objc public static let none: axeDevToolsXCUI.AxeTraits
  @objc public static let notEnabled: axeDevToolsXCUI.AxeTraits
  @objc public static let playsSound: axeDevToolsXCUI.AxeTraits
  @objc public static let searchField: axeDevToolsXCUI.AxeTraits
  @objc public static let selected: axeDevToolsXCUI.AxeTraits
  @objc public static let startsMediaSession: axeDevToolsXCUI.AxeTraits
  @objc public static let staticText: axeDevToolsXCUI.AxeTraits
  @objc public static let summaryElement: axeDevToolsXCUI.AxeTraits
  @objc public static let tabBar: axeDevToolsXCUI.AxeTraits
  @objc public static let updatesFrequently: axeDevToolsXCUI.AxeTraits
  @objc public func toString() -> Swift.String
  required convenience public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public typealias ArrayLiteralElement = axeDevToolsXCUI.AxeTraits
  public typealias Element = axeDevToolsXCUI.AxeTraits
  public typealias RawValue = Swift.UInt64
  @objc deinit
}
@objc public enum AxeImpact : Swift.Int {
  case MINOR = 0
  case MODERATE = 1
  case SERIOUS = 2
  case CRITICAL = 3
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [axeDevToolsXCUI.AxeImpact]
  public typealias RawValue = Swift.Int
  public static var allCases: [axeDevToolsXCUI.AxeImpact] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AccessToken : ObjectiveC.NSObject {
  @available(*, deprecated, message: "This will be removed in our July/August release; please use AxeDevTools.login(withUsername, andPassword, toServer) instead")
  @objc public init(username: Swift.String, password: Swift.String, realm: Swift.String = "", clientId: Swift.String = "", authServerURL: Swift.String = "") throws
  @objc deinit
}
extension axeDevToolsXCUI.UsageServiceBody.CodingKeys : Swift.Equatable {}
extension axeDevToolsXCUI.UsageServiceBody.CodingKeys : Swift.Hashable {}
extension axeDevToolsXCUI.AxeRole : Swift.CaseIterable {}
extension axeDevToolsXCUI.AxeRole : Swift.RawRepresentable {}
extension axeDevToolsXCUI.AxeRole : Swift.Hashable {}
extension axeDevToolsXCUI.AxeRole : Swift.Equatable {}
extension axeDevToolsXCUI.AxeStatus : Swift.CaseIterable {}
extension axeDevToolsXCUI.AxeStatus : Swift.RawRepresentable {}
extension axeDevToolsXCUI.AxeStatus : Swift.Hashable {}
extension axeDevToolsXCUI.AxeStatus : Swift.Equatable {}
extension axeDevToolsXCUI.AxeElementType : Swift.CaseIterable {}
extension axeDevToolsXCUI.AxeElementType : Swift.RawRepresentable {}
extension axeDevToolsXCUI.AxeElementType : Swift.Hashable {}
extension axeDevToolsXCUI.AxeElementType : Swift.Equatable {}
extension axeDevToolsXCUI.RunStatus : Swift.Equatable {}
extension axeDevToolsXCUI.RunStatus : Swift.Hashable {}
extension axeDevToolsXCUI.RunStatus : Swift.RawRepresentable {}
extension axeDevToolsXCUI.AxeOrientation : Swift.CaseIterable {}
extension axeDevToolsXCUI.AxeOrientation : Swift.RawRepresentable {}
extension axeDevToolsXCUI.AxeOrientation : Swift.Hashable {}
extension axeDevToolsXCUI.AxeOrientation : Swift.Equatable {}
extension axeDevToolsXCUI.AxeRuleId : Swift.CaseIterable {}
extension axeDevToolsXCUI.AxeRuleId : Swift.RawRepresentable {}
extension axeDevToolsXCUI.AxeRuleId : Swift.Hashable {}
extension axeDevToolsXCUI.AxeRuleId : Swift.Equatable {}
extension axeDevToolsXCUI.AxeStandard : Swift.CaseIterable {}
extension axeDevToolsXCUI.AxeStandard : Swift.RawRepresentable {}
extension axeDevToolsXCUI.AxeStandard : Swift.Hashable {}
extension axeDevToolsXCUI.AxeStandard : Swift.Equatable {}
extension axeDevToolsXCUI.AxeImpact : Swift.CaseIterable {}
extension axeDevToolsXCUI.AxeImpact : Swift.RawRepresentable {}
extension axeDevToolsXCUI.AxeImpact : Swift.Hashable {}
extension axeDevToolsXCUI.AxeImpact : Swift.Equatable {}
